basePath: /
definitions:
  handlers.BulkRegistrationRequest:
    properties:
      country_id:
        type: integer
      emails:
        type: string
      group_id:
        type: integer
      role_id:
        type: integer
    required:
    - emails
    - group_id
    - role_id
    type: object
  handlers.RegistrationParam:
    description: Registration data for bulk user registration with a role
    properties:
      country_id:
        type: integer
      emails:
        type: string
      group_id:
        type: integer
    required:
    - emails
    - group_id
    type: object
  schemas.AddProblemToTrackRequest:
    properties:
      problem_id:
        type: integer
      track_id:
        type: integer
    required:
    - problem_id
    - track_id
    type: object
  schemas.CreateCountryRequest:
    properties:
      code:
        example: ET
        type: string
      name:
        example: Ethiopia
        type: string
    required:
    - code
    - name
    type: object
  schemas.CreateExerciseRequest:
    properties:
      group_id:
        type: integer
      problem_id:
        type: integer
      track_id:
        type: integer
    required:
    - group_id
    - problem_id
    - track_id
    type: object
  schemas.CreateGroupRequest:
    properties:
      country_id:
        example: 1
        type: integer
      description:
        example: A competitive programming team
        type: string
      hoa_id:
        example: 5
        type: integer
      name:
        example: Team Alpha
        type: string
      short_name:
        example: Alpha
        type: string
    required:
    - country_id
    - name
    type: object
  schemas.CreateProblemRequest:
    properties:
      description:
        example: Find two numbers that add up to target
        type: string
      difficulty:
        allOf:
        - $ref: '#/definitions/schemas.Difficulty'
        example: medium
      link:
        example: https://leetcode.com/problems/two-sum
        type: string
      name:
        description: 'Required: true'
        example: Two Sum
        type: string
      platform:
        example: leetcode
        type: string
      tags:
        example:
        - '[''array'''
        - '''hash-table'']'
        items:
          type: string
        type: array
    required:
    - description
    - difficulty
    - link
    - name
    - platform
    type: object
  schemas.CreateRecentActionRequest:
    properties:
      action_type:
        example: problem_solved
        type: string
      description:
        example: Solved Two Sum problem
        type: string
      entity_id:
        example: 123
        type: integer
      entity_type:
        example: problem
        type: string
      user_id:
        description: 'Required: true'
        example: 1
        type: integer
    required:
    - action_type
    - description
    - entity_id
    - entity_type
    - user_id
    type: object
  schemas.CreateRoleRequest:
    properties:
      description:
        example: Can moderate content
        type: string
      type:
        description: 'Required: true'
        example: Moderator
        type: string
    required:
    - type
    type: object
  schemas.CreateSessionRequest:
    properties:
      description:
        example: Introduction to Data Structures
        type: string
      end_time:
        type: string
      group_id:
        example: 1
        type: integer
      host_id:
        example: 1
        type: integer
      location:
        example: Room 101
        type: string
      meeting_link:
        example: https://meet.google.com/abc-xyz
        type: string
      name:
        description: 'Required: true'
        example: 'DSA Session #1'
        type: string
      start_time:
        type: string
    required:
    - description
    - end_time
    - group_id
    - host_id
    - name
    - start_time
    type: object
  schemas.CreateStipendRequest:
    properties:
      account_name:
        example: John Doe
        type: string
      account_number:
        example: "1234567890"
        type: string
      amount:
        example: 500
        type: number
      bank_name:
        description: Optional fields
        example: Example Bank
        type: string
      currency:
        example: USD
        type: string
      description:
        example: Monthly stipend for April 2025
        type: string
      month:
        type: string
      payment_method:
        allOf:
        - $ref: '#/definitions/schemas.PaymentMethod'
        example: bank_transfer
      phone_number:
        example: "+1234567890"
        type: string
      user_id:
        description: 'Required: true'
        example: 1
        type: integer
    required:
    - amount
    - currency
    - month
    - payment_method
    - user_id
    type: object
  schemas.CreateSubmissionRequest:
    properties:
      code:
        example: def two_sum(nums, target):...
        type: string
      language:
        allOf:
        - $ref: '#/definitions/schemas.Language'
        example: python
      problem_id:
        example: 1
        type: integer
      user_id:
        description: 'Required: true'
        example: 1
        type: integer
    required:
    - code
    - language
    - problem_id
    - user_id
    type: object
  schemas.CreateSuperGroupRequest:
    properties:
      country_id:
        example: 1
        type: integer
      description:
        example: Second generation of A2SV students
        type: string
      name:
        description: 'Required: true'
        example: A2SV Generation 2
        type: string
    required:
    - country_id
    - description
    - name
    type: object
  schemas.CreateTrackRequest:
    properties:
      description:
        example: Advanced Data Structures and Algorithms
        type: string
      end_date:
        type: string
      group_id:
        example: 1
        type: integer
      name:
        description: 'Required: true'
        example: DSA Advanced Track
        type: string
      start_date:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/schemas.TrackType'
        example: dsa
    required:
    - description
    - end_date
    - group_id
    - name
    - start_date
    - type
    type: object
  schemas.CreateUserRequest:
    properties:
      birthday:
        type: string
      codeforces:
        example: cf_user
        type: string
      country_id:
        example: 1
        type: integer
      department:
        example: Computer Science
        type: string
      email:
        example: user@example.com
        type: string
      expected_graduation_date:
        type: string
      gender:
        example: male
        type: string
      github:
        example: github_user
        type: string
      group_id:
        example: 1
        type: integer
      hackerrank:
        example: hr_user
        type: string
      instagram:
        example: insta_user
        type: string
      leetcode:
        example: leetcode_user
        type: string
      linkedin:
        example: linkedin_profile
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: MySecret123
        type: string
      phone:
        example: "+1234567890"
        type: string
      preferred_language:
        example: en
        type: string
      role_id:
        example: 2
        type: integer
      short_bio:
        example: Software developer passionate about algorithms
        type: string
      student_id:
        example: STU123
        type: string
      telegram_uid:
        example: "123456789"
        type: string
      telegram_username:
        example: '@username'
        type: string
      university:
        example: Example University
        type: string
    required:
    - email
    - name
    - password
    type: object
  schemas.CreateVoteRequest:
    properties:
      entity_id:
        example: 123
        type: integer
      entity_type:
        description: comment, post, track, submission, problem
        example: comment
        type: string
      user_id:
        description: 'Required: true'
        example: 1
        type: integer
      vote_type:
        allOf:
        - $ref: '#/definitions/schemas.VoteType'
        example: upvote
    required:
    - entity_id
    - entity_type
    - user_id
    - vote_type
    type: object
  schemas.Difficulty:
    enum:
    - easy
    - medium
    - hard
    - very_hard
    type: string
    x-enum-varnames:
    - Easy
    - Medium
    - Hard
    - VeryHard
  schemas.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      details:
        example: Email field is required
        type: string
      message:
        example: Invalid request parameters
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  schemas.Language:
    enum:
    - python
    - java
    - cpp
    - javascript
    - go
    type: string
    x-enum-varnames:
    - Python
    - Java
    - CPP
    - JavaScript
    - Go
  schemas.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: mypassword123
        type: string
    required:
    - email
    - password
    type: object
  schemas.PaginationMeta:
    properties:
      page:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      total:
        example: 100
        type: integer
      total_pages:
        example: 10
        type: integer
    type: object
  schemas.PaymentMethod:
    enum:
    - bank_transfer
    - mobile_money
    - cash
    type: string
    x-enum-varnames:
    - BankTransfer
    - MobileMoney
    - Cash
  schemas.PaymentStatus:
    enum:
    - pending
    - approved
    - rejected
    - paid
    - failed
    type: string
    x-enum-varnames:
    - PaymentPending
    - PaymentApproved
    - PaymentRejected
    - PaymentPaid
    - PaymentFailed
  schemas.SuccessResponse:
    properties:
      code:
        example: 200
        type: integer
      data: {}
      message:
        example: Operation successful
        type: string
      meta:
        $ref: '#/definitions/schemas.PaginationMeta'
      success:
        example: true
        type: boolean
      timestamp:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  schemas.SuperToGroupRequest:
    properties:
      group_ids:
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        type: array
    required:
    - group_ids
    type: object
  schemas.TrackType:
    enum:
    - dsa
    - project
    - system_design
    type: string
    x-enum-varnames:
    - DSATrack
    - ProjectTrack
    - SystemTrack
  schemas.UpdateCountryRequest:
    properties:
      code:
        example: ET
        type: string
      name:
        example: Ethiopia
        type: string
    type: object
  schemas.UpdateExerciseRequest:
    properties:
      group_id:
        type: integer
      id:
        example: 1
        type: integer
      problem_id:
        type: integer
      track_id:
        type: integer
    type: object
  schemas.UpdateGroupRequest:
    properties:
      country_id:
        example: 2
        type: integer
      description:
        example: An advanced competitive programming team
        type: string
      hoa_id:
        example: 6
        type: integer
      name:
        example: Team Beta
        type: string
      short_name:
        example: Beta
        type: string
    type: object
  schemas.UpdateProblemRequest:
    properties:
      description:
        type: string
      difficulty:
        allOf:
        - $ref: '#/definitions/schemas.Difficulty'
        example: hard
      id:
        example: 1
        type: integer
      link:
        type: string
      name:
        example: Two Sum Problem
        type: string
      platform:
        example: leetcode
        type: string
      tag:
        example:
        - '[''array'''
        - '''hash-table'''
        - '''two-pointer'']'
        items:
          type: string
        type: array
    type: object
  schemas.UpdateRecentActionRequest:
    properties:
      action_type:
        example: problem_attempted
        type: string
      description:
        example: Attempted Two Sum problem
        type: string
      entity_id:
        example: 123
        type: integer
      entity_type:
        example: problem
        type: string
      id:
        example: 1
        type: integer
    type: object
  schemas.UpdateRoleRequest:
    properties:
      description:
        example: Can moderate all content
        type: string
      type:
        example: Senior Moderator
        type: string
    type: object
  schemas.UpdateSessionRequest:
    properties:
      description:
        example: Updated Introduction to Data Structures
        type: string
      end_time:
        type: string
      group_id:
        example: 1
        type: integer
      host_id:
        example: 1
        type: integer
      location:
        example: Room 102
        type: string
      meeting_link:
        example: https://meet.google.com/new-link
        type: string
      name:
        example: 'DSA Session #1 - Updated'
        type: string
      start_time:
        type: string
      status:
        example: completed
        type: string
    type: object
  schemas.UpdateStipendRequest:
    properties:
      account_name:
        example: John Doe
        type: string
      account_number:
        example: "0987654321"
        type: string
      amount:
        example: 550
        type: number
      bank_name:
        example: New Bank
        type: string
      currency:
        example: USD
        type: string
      description:
        example: Updated monthly stipend
        type: string
      notes:
        example: Payment processed successfully
        type: string
      paid_at:
        type: string
      payment_method:
        allOf:
        - $ref: '#/definitions/schemas.PaymentMethod'
        example: mobile_money
      phone_number:
        example: "+1234567890"
        type: string
      status:
        allOf:
        - $ref: '#/definitions/schemas.PaymentStatus'
        example: payment_approved
      transaction_id:
        description: Payment processing fields
        example: TXN123456
        type: string
    type: object
  schemas.UpdateSuperGroupRequest:
    properties:
      country_id:
        example: 1
        type: integer
      description:
        example: Advanced track of second generation
        type: string
      name:
        example: A2SV Generation 2 - Advanced
        type: string
      status:
        example: active
        type: string
    type: object
  schemas.UpdateTrackRequest:
    properties:
      description:
        example: Expert level algorithms
        type: string
      end_date:
        type: string
      group_id:
        example: 1
        type: integer
      name:
        example: DSA Expert Track
        type: string
      start_date:
        type: string
      status:
        example: active
        type: string
      type:
        allOf:
        - $ref: '#/definitions/schemas.TrackType'
        example: dsa
    type: object
  schemas.UpdateUserRequest:
    properties:
      birthday:
        type: string
      codeforces:
        example: cf_user
        type: string
      country_id:
        example: 1
        type: integer
      department:
        example: Computer Science
        type: string
      email:
        example: user@example.com
        type: string
      expected_graduation_date:
        type: string
      gender:
        example: male
        type: string
      github:
        example: github_user
        type: string
      group_id:
        example: 1
        type: integer
      hackerrank:
        example: hr_user
        type: string
      instagram:
        example: insta_user
        type: string
      leetcode:
        example: leetcode_user
        type: string
      linkedin:
        example: linkedin_profile
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: MySecret123
        type: string
      phone:
        example: "+1234567890"
        type: string
      preferred_language:
        example: en
        type: string
      role_id:
        example: 2
        type: integer
      short_bio:
        example: Software developer passionate about algorithms
        type: string
      student_id:
        example: STU123
        type: string
      telegram_uid:
        example: "123456789"
        type: string
      telegram_username:
        example: '@username'
        type: string
      university:
        example: Example University
        type: string
    type: object
  schemas.UpdateVoteRequest:
    properties:
      vote_type:
        allOf:
        - $ref: '#/definitions/schemas.VoteType'
        example: downvote
    type: object
  schemas.VoteType:
    enum:
    - upvote
    - downvote
    type: string
    x-enum-varnames:
    - Upvote
    - Downvote
host: https://yene-hub-ls0y.onrender.com
info:
  contact:
    email: support@hub.a2sv.org
    name: API Support
  description: This is the API documentation for the Hub backend.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Hub API
  version: "1.0"
paths:
  /api/auth/google:
    get:
      consumes:
      - application/json
      description: Initiates the OAuth2 flow by redirecting to Google's authentication
        page
      produces:
      - application/json
      responses:
        "302":
          description: Redirect to Google OAuth
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "500":
          description: Failed to initiate OAuth flow
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Start Google OAuth
      tags:
      - auth
  /api/auth/google/callback:
    get:
      consumes:
      - application/json
      description: Process Google OAuth callback, verify user, and return JWT token
      parameters:
      - description: OAuth2 authorization code from Google
        in: query
        name: code
        required: true
        type: string
      - description: OAuth state for CSRF protection
        in: query
        name: state
        type: string
      - description: Error message from OAuth provider
        in: query
        name: error
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Missing or invalid authorization code
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: User not registered or email not verified
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Invalid OAuth state
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Handle Google OAuth callback
      tags:
      - auth
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /api/countries:
    get:
      description: Get a list of all countries
      produces:
      - application/json
      responses:
        "200":
          description: List of countries
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: List countries
      tags:
      - Countries
    post:
      consumes:
      - application/json
      description: Create a new country entry
      parameters:
      - description: Country data
        in: body
        name: country
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateCountryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Country created successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Create a new country
      tags:
      - Countries
  /api/countries/{id}:
    delete:
      description: Delete a country by its ID
      parameters:
      - description: Country ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Country deleted successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid country ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Country not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Delete a country
      tags:
      - Countries
    get:
      description: Get a country by its ID
      parameters:
      - description: Country ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Country details
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid country ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Country not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get country by ID
      tags:
      - Countries
    patch:
      consumes:
      - application/json
      description: Update a country by its ID
      parameters:
      - description: Country ID
        in: path
        name: id
        required: true
        type: integer
      - description: Country data
        in: body
        name: country
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateCountryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Country updated successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body or country ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Country not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Update country
      tags:
      - Countries
  /api/groups:
    get:
      description: Get a list of all groups
      produces:
      - application/json
      responses:
        "200":
          description: List of groups
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: List groups
      tags:
      - Groups
    post:
      consumes:
      - application/json
      description: Create a new group entry
      parameters:
      - description: Group data
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateGroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Group created successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Create a new group
      tags:
      - Groups
  /api/groups/{id}:
    delete:
      description: Delete a group by its ID
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Group deleted successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid group ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Group not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Delete a group
      tags:
      - Groups
    get:
      description: Get a group by its ID
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Group details
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid group ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Group not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get group by ID
      tags:
      - Groups
    patch:
      consumes:
      - application/json
      description: Update a group by its ID
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      - description: Group data
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Group updated successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body or group ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Group not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Update group
      tags:
      - Groups
  /api/groups/country/{country_id}:
    get:
      description: Get a list of groups by country ID
      parameters:
      - description: Country ID
        in: path
        name: country_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of groups
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: List groups by country ID
      tags:
      - Groups
  /api/problems:
    get:
      description: Get a list of all problems
      produces:
      - application/json
      responses:
        "200":
          description: List of problems
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: List problems
      tags:
      - Problems
    post:
      consumes:
      - application/json
      description: Create a new problem entry
      parameters:
      - description: Problem data
        in: body
        name: problem
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateProblemRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Problem created successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Create a new problem
      tags:
      - Problems
  /api/problems/{id}:
    delete:
      description: Delete a problem by its ID
      parameters:
      - description: Problem ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Problem deleted successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid problem ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Problem not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Delete a problem
      tags:
      - Problems
    get:
      description: Get a problem by its ID
      parameters:
      - description: Problem ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Problem details
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid problem ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Problem not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get problem by ID
      tags:
      - Problems
    patch:
      consumes:
      - application/json
      description: Update a problem by its ID
      parameters:
      - description: Problem ID
        in: path
        name: id
        required: true
        type: integer
      - description: Problem data
        in: body
        name: problem
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateProblemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Problem updated successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body or problem ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Problem not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Update a problem
      tags:
      - Problems
  /api/problems/name/{name}:
    get:
      description: Get a problem by its name
      parameters:
      - description: Problem name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Problem details
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid problem name
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Problem not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get problem by name
      tags:
      - Problems
  /api/recent_actions:
    get:
      description: Get a list of all recent user actions
      produces:
      - application/json
      responses:
        "200":
          description: List of recent actions
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: List recent actions
      tags:
      - RecentActions
    post:
      consumes:
      - application/json
      description: Create a new recent user action
      parameters:
      - description: Recent action details
        in: body
        name: recentAction
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateRecentActionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Recent action created
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Create recent action
      tags:
      - RecentActions
  /api/recent_actions/{id}:
    delete:
      description: Delete a recent user action
      parameters:
      - description: Recent Action ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Recent action deleted
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Recent action not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Delete recent action
      tags:
      - RecentActions
    get:
      description: Get details of a recent action by its ID
      parameters:
      - description: Recent Action ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Recent action details
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get recent action by ID
      tags:
      - RecentActions
    patch:
      consumes:
      - application/json
      description: Update a recent user action
      parameters:
      - description: Recent Action ID
        in: path
        name: id
        required: true
        type: integer
      - description: Recent action details
        in: body
        name: recentAction
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateRecentActionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Recent action updated
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Recent action not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Update recent action
      tags:
      - RecentActions
  /api/recent_actions/type/{action_type}:
    get:
      description: Get a list of recent actions for a specific type
      parameters:
      - description: Action Type
        in: path
        name: action_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of recent actions for the type
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid action type
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get recent actions by type
      tags:
      - RecentActions
  /api/recent_actions/user/{user_id}:
    get:
      description: Get a list of recent actions for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of recent actions for the user
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get recent actions by user ID
      tags:
      - RecentActions
  /api/registration/bulk:
    post:
      consumes:
      - application/json
      description: Register multiple users with the provided information
      parameters:
      - description: Bulk registration data
        in: body
        name: bulk-registration
        required: true
        schema:
          $ref: '#/definitions/handlers.BulkRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Bulk registration processed
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Register multiple users in bulk
      tags:
      - Registration
  /api/registration/role/{role_id}:
    post:
      consumes:
      - application/json
      description: Register multiple users with the provided information and a specific
        role ID
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      - description: Registration data
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/handlers.RegistrationParam'
      produces:
      - application/json
      responses:
        "200":
          description: Bulk registration processed
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Register multiple users with a specific role
      tags:
      - Registration
  /api/roles:
    get:
      consumes:
      - application/json
      description: Get a paginated list of roles
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - default: 0
        description: Page number
        in: query
        minimum: 0
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of roles retrieved successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: List roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new role with the provided information
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Create role
      tags:
      - roles
  /api/roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing role
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role ID
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid role ID format
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Delete role
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific role
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role ID
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role details retrieved successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid role ID format
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get role
      tags:
      - roles
    patch:
      consumes:
      - application/json
      description: Update an existing role's information
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role ID
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      - description: Role update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request format or role ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Update role
      tags:
      - roles
  /api/sessions:
    get:
      description: Get a list of all sessions
      produces:
      - application/json
      responses:
        "200":
          description: List of sessions
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: List sessions
      tags:
      - Sessions
    post:
      consumes:
      - application/json
      description: Create a new session for a user
      parameters:
      - description: Session data
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateSessionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Session created successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Create a new session
      tags:
      - Sessions
  /api/sessions/{id}:
    delete:
      description: Delete a session by its ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Session deleted successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid session ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Delete a session
      tags:
      - Sessions
    get:
      description: Get a session by its ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Session details
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid session ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get session by ID
      tags:
      - Sessions
    patch:
      consumes:
      - application/json
      description: Update a session by its ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      - description: Session data
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateSessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Session updated successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Update a session
      tags:
      - Sessions
  /api/sessions/name/{name}:
    get:
      description: Get a session by its name
      parameters:
      - description: Session name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session details
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid session name
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get session by name
      tags:
      - Sessions
  /api/sessions/start-time/{start_time}:
    get:
      description: Get a session by its start time
      parameters:
      - description: Session start time
        in: path
        name: start_time
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session details
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid session start time
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get session by start time
      tags:
      - Sessions
  /api/stipends:
    get:
      description: Get a list of all stipends
      produces:
      - application/json
      responses:
        "200":
          description: List of stipends
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Failed to fetch stippends
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: List stipends
      tags:
      - Stipends
    post:
      consumes:
      - application/json
      description: Create a new stipend entry
      parameters:
      - description: Stipend data
        in: body
        name: stipend
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateStipendRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Stipend created successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Create a new stipend
      tags:
      - Stipends
  /api/stipends/{stippend_id}:
    delete:
      description: Delete a stipend by its ID
      parameters:
      - description: Stipend ID
        in: path
        name: stippend_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Stipend deleted successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid stipend ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Stipend not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Delete a stipend
      tags:
      - Stipends
    get:
      description: Get a stipend by its ID
      parameters:
      - description: Stipend ID
        in: path
        name: stippend_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Stipend details
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid stipend ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Stipend not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get stipend by ID
      tags:
      - Stipends
    patch:
      consumes:
      - application/json
      description: Update a stipend by its ID
      parameters:
      - description: Stipend ID
        in: path
        name: stippend_id
        required: true
        type: integer
      - description: Stipend data
        in: body
        name: stipend
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateStipendRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Stipend updated successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Update a stipend
      tags:
      - Stipends
  /api/submissions:
    get:
      description: Get a list of all submissions
      produces:
      - application/json
      responses:
        "200":
          description: List of submissions
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
      summary: List submissions
      tags:
      - Submissions
    post:
      consumes:
      - application/json
      description: Create a new submission entry
      parameters:
      - description: Submission data
        in: body
        name: submission
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateSubmissionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Submission created successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Create a new submission
      tags:
      - Submissions
  /api/submissions/{id}:
    get:
      description: Get a submission by its ID
      parameters:
      - description: Submission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Submission details
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid submission ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Submission not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get submission by ID
      tags:
      - Submissions
  /api/submissions/problem/{problem_id}:
    get:
      description: Get submissions for a specific problem
      parameters:
      - description: Problem ID
        in: path
        name: problem_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Submissions for problem
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid problem ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get submissions by problem ID
      tags:
      - Submissions
  /api/submissions/user/{user_id}:
    get:
      description: Get submissions for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Submissions for user
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get submissions by user ID
      tags:
      - Submissions
  /api/super-groups/{super_group_id}/groups:
    post:
      consumes:
      - application/json
      description: Associate one or more groups with a super group
      parameters:
      - description: Super Group ID
        in: path
        name: super_group_id
        required: true
        type: integer
      - description: Group IDs to associate
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schemas.SuperToGroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Groups added to super group successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body or super group ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Super group not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Add groups to a super group
      tags:
      - SuperGroups
  /api/super_groups:
    get:
      description: Get a list of all super groups
      produces:
      - application/json
      responses:
        "200":
          description: List of super groups
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
      summary: List super groups
      tags:
      - SuperGroups
    post:
      consumes:
      - application/json
      description: Create a new super group entry
      parameters:
      - description: SuperGroup data
        in: body
        name: super_group
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateSuperGroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Super group created successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Create a new super group
      tags:
      - SuperGroups
  /api/super_groups/{id}:
    delete:
      description: Delete a super group by its ID
      parameters:
      - description: SuperGroup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Super group deleted successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid super group ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Super group not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Delete a super group
      tags:
      - SuperGroups
    get:
      description: Get a super group by its ID
      parameters:
      - description: SuperGroup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Super group details
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid super group ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Super group not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get super group by ID
      tags:
      - SuperGroups
    patch:
      consumes:
      - application/json
      description: Update a super group by its ID
      parameters:
      - description: SuperGroup ID
        in: path
        name: id
        required: true
        type: integer
      - description: SuperGroup data
        in: body
        name: super_group
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateSuperGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Super group updated successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Update a super group
      tags:
      - SuperGroups
  /api/super_to_groups:
    get:
      description: Get a list of all super to groups
      produces:
      - application/json
      responses:
        "200":
          description: List of super to groups
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
      summary: List super to groups
      tags:
      - SuperToGroups
  /api/super_to_groups/{id}:
    delete:
      description: Delete a super to group by its ID
      parameters:
      - description: SuperToGroup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Super to group deleted successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid super to group ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Super to group not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Delete a super to group
      tags:
      - SuperToGroups
    get:
      description: Get a super to group by its ID
      parameters:
      - description: SuperToGroup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Super to group details
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid super to group ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Super to group not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get super to group by ID
      tags:
      - SuperToGroups
    patch:
      consumes:
      - application/json
      description: Update a super to group by its ID
      parameters:
      - description: SuperToGroup ID
        in: path
        name: id
        required: true
        type: integer
      - description: SuperToGroup data
        in: body
        name: super_to_group
        required: true
        schema:
          $ref: '#/definitions/schemas.SuperToGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Super to group updated successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Update a super to group
      tags:
      - SuperToGroups
  /api/tracks:
    get:
      description: Get a list of all tracks
      produces:
      - application/json
      responses:
        "200":
          description: List of tracks
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
      summary: List tracks
      tags:
      - Tracks
    post:
      consumes:
      - application/json
      description: Create a new track entry
      parameters:
      - description: Track data
        in: body
        name: track
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateTrackRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Track created successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Create a new track
      tags:
      - Tracks
  /api/tracks/{id}:
    delete:
      description: Delete a track by its ID
      parameters:
      - description: Track ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Track deleted successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid track ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Track not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Delete a track
      tags:
      - Tracks
    get:
      description: Get a track by its ID
      parameters:
      - description: Track ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Track details
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid track ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Track not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get track by ID
      tags:
      - Tracks
    patch:
      consumes:
      - application/json
      description: Update a track by its ID
      parameters:
      - description: Track ID
        in: path
        name: id
        required: true
        type: integer
      - description: Track data
        in: body
        name: track
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateTrackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Track updated successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Update a track
      tags:
      - Tracks
  /api/tracks/name/{name}:
    get:
      description: Get a track by its name
      parameters:
      - description: Track Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Track details
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid track name
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Track not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get track by name
      tags:
      - Tracks
  /api/users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users with optional filters
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      - description: Search term for filtering users
        in: query
        name: search
        type: string
      - description: Filter by role ID
        in: query
        minimum: 1
        name: role_id
        type: integer
      - description: Filter by group ID
        in: query
        minimum: 1
        name: group_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users retrieved successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user account with the provided information
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "409":
          description: Conflict - User already exists
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details retrieved successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get user details
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update an existing user's information
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Update user details
      tags:
      - users
  /api/votes:
    get:
      description: Get a list of votes
      produces:
      - application/json
      responses:
        "200":
          description: List of votes
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
      summary: List votes
      tags:
      - Votes
    post:
      consumes:
      - application/json
      description: Create a new vote entry
      parameters:
      - description: Vote data
        in: body
        name: vote
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateVoteRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Vote created successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Create a new vote
      tags:
      - Votes
  /api/votes/{id}:
    delete:
      description: Delete a vote by its ID
      parameters:
      - description: Vote ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Vote deleted successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid vote ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Vote not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Delete a vote
      tags:
      - Votes
    get:
      description: Get a vote by its ID
      parameters:
      - description: Vote ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Vote details
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid vote ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Vote not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get vote by ID
      tags:
      - Votes
    patch:
      consumes:
      - application/json
      description: Update a vote by its ID
      parameters:
      - description: Vote ID
        in: path
        name: id
        required: true
        type: integer
      - description: Vote data
        in: body
        name: vote
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateVoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Vote updated successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Update a vote
      tags:
      - Votes
  /api/votes/comment/{comment_id}:
    get:
      description: Get votes for a specific comment
      parameters:
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Votes for comment
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid comment ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get votes by comment ID
      tags:
      - Votes
  /api/votes/post/{post_id}:
    get:
      description: Get votes for a specific post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Votes for post
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid post ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get votes by post ID
      tags:
      - Votes
  /api/votes/problem/{problem_id}:
    get:
      description: Get votes for a specific problem
      parameters:
      - description: Problem ID
        in: path
        name: problem_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Votes for problem
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid problem ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get votes by problem ID
      tags:
      - Votes
  /api/votes/submission/{submission_id}:
    get:
      description: Get votes for a specific submission
      parameters:
      - description: Submission ID
        in: path
        name: submission_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Votes for submission
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid submission ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get votes by submission ID
      tags:
      - Votes
  /api/votes/track/{track_id}:
    get:
      description: Get votes for a specific track
      parameters:
      - description: Track ID
        in: path
        name: track_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Votes for track
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid track ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get votes by track ID
      tags:
      - Votes
  /api/votes/user/{user_id}:
    get:
      description: Get votes for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Votes for user
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get votes by user ID
      tags:
      - Votes
  /exercises:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.SuccessResponse'
            type: array
      summary: List all exercises
      tags:
      - Exercises
    post:
      consumes:
      - application/json
      parameters:
      - description: Exercise
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateExerciseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Create a new exercise
      tags:
      - Exercises
  /exercises/{id}:
    delete:
      parameters:
      - description: Exercise ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Delete an exercise
      tags:
      - Exercises
    get:
      parameters:
      - description: Exercise ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get an exercise by ID
      tags:
      - Exercises
    patch:
      consumes:
      - application/json
      parameters:
      - description: Exercise ID
        in: path
        name: id
        required: true
        type: integer
      - description: Exercise
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateExerciseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Update an exercise
      tags:
      - Exercises
  /groups/gid/:group_id/exercises:
    get:
      parameters:
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.SuccessResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get exercises by group ID
      tags:
      - Exercises
  /problem-tracks/{id}:
    delete:
      description: Remove a problem from a track by ProblemTrack ID
      parameters:
      - description: ProblemTrack ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Remove a problem from a track
      tags:
      - ProblemTracks
  /problems/pid/:problem_id/exercises:
    get:
      parameters:
      - description: Problem ID
        in: path
        name: problem_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.SuccessResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get exercises by problem ID
      tags:
      - Exercises
  /tracks/tid/:track_id/exercises:
    get:
      parameters:
      - description: Track ID
        in: path
        name: track_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.SuccessResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get exercises by track ID
      tags:
      - Exercises
  /tracks/tid/{track_id}/problems:
    get:
      description: Get all problems for a specific track
      parameters:
      - description: Track ID
        in: path
        name: track_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.SuccessResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: List problems in a track
      tags:
      - ProblemTracks
    post:
      consumes:
      - application/json
      description: Add a problem to a specific track
      parameters:
      - description: Track ID
        in: path
        name: track_id
        required: true
        type: integer
      - description: Problem
        in: body
        name: problem
        required: true
        schema:
          $ref: '#/definitions/schemas.AddProblemToTrackRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Add a problem to a track
      tags:
      - ProblemTracks
  /tracks/tid/{track_id}/problems/by-difficulty:
    get:
      description: Get problems in a track by difficulty
      parameters:
      - description: Track ID
        in: path
        name: track_id
        required: true
        type: integer
      - description: Difficulty
        in: query
        name: difficulty
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get problems in track by difficulty
      tags:
      - ProblemTracks
  /tracks/tid/{track_id}/problems/by-name:
    get:
      description: Get a problem in a track by its name
      parameters:
      - description: Track ID
        in: path
        name: track_id
        required: true
        type: integer
      - description: Problem name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get problem in track by name
      tags:
      - ProblemTracks
  /tracks/tid/{track_id}/problems/by-platform:
    get:
      description: Get problems in a track by platform
      parameters:
      - description: Track ID
        in: path
        name: track_id
        required: true
        type: integer
      - description: Platform
        in: query
        name: platform
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get problems in track by platform
      tags:
      - ProblemTracks
  /tracks/tid/{track_id}/problems/by-tag:
    get:
      description: Get problems in a track by tag
      parameters:
      - description: Track ID
        in: path
        name: track_id
        required: true
        type: integer
      - description: Tag
        in: query
        name: tag
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get problems in track by tag
      tags:
      - ProblemTracks
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
