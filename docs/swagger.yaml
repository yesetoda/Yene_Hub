basePath: /
definitions:
  entity.APIToken:
    properties:
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: integer
      name:
        type: string
      token:
        type: string
      type:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.Attendance:
    properties:
      at:
        description: Time when attendance was taken
        type: string
      created_at:
        type: string
      head:
        $ref: '#/definitions/entity.User'
      head_id:
        description: The head who recorded this attendance
        type: integer
      id:
        type: integer
      session:
        $ref: '#/definitions/entity.Session'
      session_id:
        type: integer
      status:
        description: e.g., 0=absent, 1=present, 2=excused
        type: integer
      type:
        description: Type of attendance record
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.Comment:
    properties:
      created_at:
        type: string
      id:
        type: integer
      post:
        $ref: '#/definitions/entity.Post'
      post_id:
        type: integer
      problem:
        $ref: '#/definitions/entity.Problem'
      problem_id:
        type: integer
      replies:
        description: Relations
        items:
          $ref: '#/definitions/entity.Comment'
        type: array
      reply:
        $ref: '#/definitions/entity.Comment'
      reply_id:
        type: integer
      submission:
        $ref: '#/definitions/entity.Submission'
      submission_id:
        type: integer
      text:
        type: string
      track:
        $ref: '#/definitions/entity.Track'
      track_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
      votes:
        items:
          $ref: '#/definitions/entity.Vote'
        type: array
    type: object
  entity.Contest:
    properties:
      created_at:
        type: string
      id:
        type: integer
      link:
        type: string
      link2:
        type: string
      link3:
        type: string
      name:
        type: string
      problem_count:
        type: integer
      problems:
        description: Relations
        items:
          $ref: '#/definitions/entity.Problem'
        type: array
      super_group:
        $ref: '#/definitions/entity.SuperGroup'
      super_group_id:
        type: integer
      type:
        type: string
      unrated:
        type: boolean
      updated_at:
        type: string
      votes:
        description: |-
          Ratings       []Rating       `json:"ratings,omitempty" gorm:"foreignKey:ContestID"`
          DivisionUsers []DivisionUser `json:"division_users,omitempty" gorm:"foreignKey:ContestID"`
        items:
          $ref: '#/definitions/entity.Vote'
        type: array
    type: object
  entity.Country:
    properties:
      created_at:
        type: string
      groups:
        items:
          $ref: '#/definitions/entity.Group'
        type: array
      id:
        type: integer
      name:
        type: string
      short_code:
        type: string
      updated_at:
        type: string
      users:
        description: Relations
        items:
          $ref: '#/definitions/entity.User'
        type: array
    type: object
  entity.DailyProblem:
    properties:
      created_at:
        type: string
      for_date:
        type: string
      id:
        type: integer
      problem:
        $ref: '#/definitions/entity.Problem'
      problem_id:
        type: integer
      super_group:
        $ref: '#/definitions/entity.SuperGroup'
      super_group_id:
        type: integer
      updated_at:
        type: string
    type: object
  entity.Exercise:
    properties:
      created_at:
        type: string
      group:
        $ref: '#/definitions/entity.Group'
      group_id:
        type: integer
      id:
        type: integer
      problem:
        $ref: '#/definitions/entity.Problem'
      problem_id:
        type: integer
      track:
        $ref: '#/definitions/entity.Track'
      track_id:
        type: integer
      updated_at:
        type: string
    type: object
  entity.Fund:
    properties:
      amount:
        type: number
      created_at:
        type: string
      currency:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      sessions:
        description: Relations
        items:
          $ref: '#/definitions/entity.Session'
        type: array
      stipends:
        items:
          $ref: '#/definitions/entity.Stipend'
        type: array
      updated_at:
        type: string
    type: object
  entity.GoogleOAuth:
    properties:
      calendar_id:
        type: string
      created_at:
        type: string
      encrypted_token_string:
        type: string
      group:
        $ref: '#/definitions/entity.Group'
      group_id:
        type: integer
      id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.Group:
    properties:
      country:
        $ref: '#/definitions/entity.Country'
      country_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      exercises:
        items:
          $ref: '#/definitions/entity.Exercise'
        type: array
      google_oauths:
        items:
          $ref: '#/definitions/entity.GoogleOAuth'
        type: array
      group_sessions:
        items:
          $ref: '#/definitions/entity.GroupSession'
        type: array
      hoa_id:
        description: Head of Academy ID
        type: integer
      hoas:
        items:
          $ref: '#/definitions/entity.HOA'
        type: array
      id:
        type: integer
      invites:
        items:
          $ref: '#/definitions/entity.Invite'
        type: array
      name:
        type: string
      short_name:
        type: string
      super_to_groups:
        items:
          $ref: '#/definitions/entity.SuperToGroup'
        type: array
      updated_at:
        type: string
      users:
        description: Relations
        items:
          $ref: '#/definitions/entity.User'
        type: array
    type: object
  entity.GroupSession:
    properties:
      created_at:
        type: string
      group:
        $ref: '#/definitions/entity.Group'
      group_id:
        type: integer
      id:
        type: integer
      session:
        $ref: '#/definitions/entity.Session'
      session_id:
        type: integer
      updated_at:
        type: string
    type: object
  entity.HOA:
    properties:
      created_at:
        type: string
      group:
        $ref: '#/definitions/entity.Group'
      group_id:
        type: integer
      id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.Invite:
    properties:
      created_at:
        type: string
      group:
        $ref: '#/definitions/entity.Group'
      group_id:
        type: integer
      id:
        type: integer
      key:
        description: Unique invite key
        type: string
      role:
        $ref: '#/definitions/entity.Role'
      role_id:
        type: integer
      updated_at:
        type: string
      used:
        description: Whether the invite has been used
        type: boolean
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        description: User who created the invite
        type: integer
    type: object
  entity.Post:
    properties:
      body:
        type: string
      comments:
        description: Relations
        items:
          $ref: '#/definitions/entity.Comment'
        type: array
      created_at:
        type: string
      id:
        type: integer
      post_to_tags:
        items:
          $ref: '#/definitions/entity.PostToTag'
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
      votes:
        items:
          $ref: '#/definitions/entity.Vote'
        type: array
    type: object
  entity.PostTag:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      post_to_tags:
        description: Relations
        items:
          $ref: '#/definitions/entity.PostToTag'
        type: array
      updated_at:
        type: string
    type: object
  entity.PostToTag:
    properties:
      created_at:
        type: string
      id:
        type: integer
      post:
        $ref: '#/definitions/entity.Post'
      post_id:
        type: integer
      post_tag:
        $ref: '#/definitions/entity.PostTag'
      post_tag_id:
        type: integer
      updated_at:
        type: string
    type: object
  entity.Problem:
    properties:
      comments:
        items:
          $ref: '#/definitions/entity.Comment'
        type: array
      contest:
        $ref: '#/definitions/entity.Contest'
      contest_id:
        type: integer
      created_at:
        type: string
      daily_problems:
        items:
          $ref: '#/definitions/entity.DailyProblem'
        type: array
      difficulty:
        type: string
      exercises:
        items:
          $ref: '#/definitions/entity.Exercise'
        type: array
      id:
        type: integer
      link:
        type: string
      name:
        type: string
      platform:
        type: string
      problem_tracks:
        items:
          $ref: '#/definitions/entity.ProblemTrack'
        type: array
      submissions:
        description: Relations
        items:
          $ref: '#/definitions/entity.Submission'
        type: array
      tag:
        type: string
      track:
        $ref: '#/definitions/entity.Track'
      track_id:
        type: integer
      updated_at:
        type: string
      votes:
        items:
          $ref: '#/definitions/entity.Vote'
        type: array
    type: object
  entity.ProblemTrack:
    properties:
      created_at:
        type: string
      id:
        type: integer
      problem:
        $ref: '#/definitions/entity.Problem'
      problem_id:
        type: integer
      track:
        $ref: '#/definitions/entity.Track'
      track_id:
        type: integer
      updated_at:
        type: string
    type: object
  entity.RecentAction:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      type:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.Role:
    properties:
      created_at:
        type: string
      id:
        type: integer
      invites:
        items:
          $ref: '#/definitions/entity.Invite'
        type: array
      type:
        type: string
      updated_at:
        type: string
      users:
        description: Relations
        items:
          $ref: '#/definitions/entity.User'
        type: array
    type: object
  entity.Session:
    properties:
      attendances:
        description: Relations
        items:
          $ref: '#/definitions/entity.Attendance'
        type: array
      calendar_event_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      end_time:
        type: string
      fund:
        $ref: '#/definitions/entity.Fund'
      fund_id:
        type: integer
      group_sessions:
        items:
          $ref: '#/definitions/entity.GroupSession'
        type: array
      id:
        type: integer
      lecturer:
        $ref: '#/definitions/entity.User'
      lecturer_id:
        type: integer
      location:
        type: string
      meet_link:
        type: string
      name:
        type: string
      recording_link:
        type: string
      resource_link:
        type: string
      start_time:
        type: string
      stipends:
        items:
          $ref: '#/definitions/entity.Stipend'
        type: array
      updated_at:
        type: string
    type: object
  entity.Stipend:
    properties:
      created_at:
        type: string
      fund:
        $ref: '#/definitions/entity.Fund'
      fund_id:
        type: integer
      id:
        type: integer
      paid:
        type: boolean
      session:
        $ref: '#/definitions/entity.Session'
      session_id:
        type: integer
      share:
        description: Share of the fund amount
        type: number
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.Submission:
    properties:
      code:
        type: string
      comments:
        description: Relations
        items:
          $ref: '#/definitions/entity.Comment'
        type: array
      created_at:
        type: string
      id:
        type: integer
      in_contest:
        description: Whether it was solved in a contest
        type: integer
      language:
        type: string
      problem:
        $ref: '#/definitions/entity.Problem'
      problem_id:
        type: integer
      time_spent:
        description: Time spent in seconds
        type: integer
      tries:
        description: Number of attempts
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
      verified:
        type: boolean
      votes:
        items:
          $ref: '#/definitions/entity.Vote'
        type: array
    type: object
  entity.SuperGroup:
    properties:
      contests:
        items:
          $ref: '#/definitions/entity.Contest'
        type: array
      created_at:
        type: string
      daily_problems:
        items:
          $ref: '#/definitions/entity.DailyProblem'
        type: array
      id:
        type: integer
      name:
        type: string
      super_to_groups:
        items:
          $ref: '#/definitions/entity.SuperToGroup'
        type: array
      tracks:
        description: Relations
        items:
          $ref: '#/definitions/entity.Track'
        type: array
      updated_at:
        type: string
    type: object
  entity.SuperToGroup:
    properties:
      created_at:
        type: string
      group:
        $ref: '#/definitions/entity.Group'
      group_id:
        type: integer
      id:
        type: integer
      super_group:
        $ref: '#/definitions/entity.SuperGroup'
      super_group_id:
        type: integer
      updated_at:
        type: string
    type: object
  entity.Track:
    properties:
      active:
        type: boolean
      comments:
        items:
          $ref: '#/definitions/entity.Comment'
        type: array
      created_at:
        type: string
      exercises:
        items:
          $ref: '#/definitions/entity.Exercise'
        type: array
      id:
        type: integer
      name:
        type: string
      problem_tracks:
        items:
          $ref: '#/definitions/entity.ProblemTrack'
        type: array
      problems:
        description: Relations
        items:
          $ref: '#/definitions/entity.Problem'
        type: array
      super_group:
        $ref: '#/definitions/entity.SuperGroup'
      super_group_id:
        type: integer
      updated_at:
        type: string
      votes:
        items:
          $ref: '#/definitions/entity.Vote'
        type: array
    type: object
  entity.User:
    properties:
      api_tokens:
        items:
          $ref: '#/definitions/entity.APIToken'
        type: array
      attendances:
        items:
          $ref: '#/definitions/entity.Attendance'
        type: array
      birthday:
        description: Personal Information
        type: string
      code_of_conduct:
        type: string
      codeforces:
        type: string
      comments:
        items:
          $ref: '#/definitions/entity.Comment'
        type: array
      config:
        type: string
      country:
        $ref: '#/definitions/entity.Country'
      country_id:
        type: integer
      created_at:
        description: Timestamps
        type: string
      cv:
        description: Professional Details
        type: string
      department:
        type: string
      email:
        type: string
      expected_graduation_date:
        type: string
      gender:
        type: string
      github:
        type: string
      group:
        $ref: '#/definitions/entity.Group'
      group_id:
        type: integer
      hackerrank:
        type: string
      head_attendances:
        items:
          $ref: '#/definitions/entity.Attendance'
        type: array
      id:
        description: Core Identity Fields
        type: integer
      inactive:
        type: boolean
      instagram:
        type: string
      joined_date:
        type: string
      leetcode:
        description: |-
          Coding Profiles (optional)
          Use pointer types so that if no value is provided, they remain nil.
        type: string
      linkedin:
        description: Social Media (all optional)
        type: string
      mentor_name:
        type: string
      name:
        type: string
      phone:
        description: Contact Information
        type: string
      photo:
        description: System Fields
        type: string
      posts:
        items:
          $ref: '#/definitions/entity.Post'
        type: array
      preferred_language:
        type: string
      recent_actions:
        items:
          $ref: '#/definitions/entity.RecentAction'
        type: array
      role:
        $ref: '#/definitions/entity.Role'
      role_id:
        description: Role and Relationships
        type: integer
      short_bio:
        type: string
      student_id:
        type: string
      submissions:
        description: Relations (using GORM associations)
        items:
          $ref: '#/definitions/entity.Submission'
        type: array
      telegram_uid:
        type: string
      telegram_username:
        type: string
      tshirt_color:
        description: Physical Attributes
        type: string
      tshirt_size:
        type: string
      university:
        description: Academic Information
        type: string
      updated_at:
        type: string
    type: object
  entity.Vote:
    properties:
      comment:
        $ref: '#/definitions/entity.Comment'
      comment_id:
        type: integer
      contest:
        $ref: '#/definitions/entity.Contest'
      contest_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      post:
        $ref: '#/definitions/entity.Post'
      post_id:
        type: integer
      problem:
        $ref: '#/definitions/entity.Problem'
      problem_id:
        type: integer
      submission:
        $ref: '#/definitions/entity.Submission'
      submission_id:
        type: integer
      track:
        $ref: '#/definitions/entity.Track'
      track_id:
        type: integer
      type:
        description: e.g., 1=upvote, -1=downvote
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  handlers.BulkRegistrationRequest:
    properties:
      country_id:
        type: integer
      emails:
        type: string
      group_id:
        type: integer
      role_id:
        type: integer
    required:
    - emails
    - group_id
    - role_id
    type: object
  handlers.RegistrationParam:
    description: Registration data for bulk user registration with a role
    properties:
      country_id:
        type: integer
      emails:
        type: string
      group_id:
        type: integer
    required:
    - emails
    - group_id
    type: object
  schemas.AuthTokenResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/entity.User'
    type: object
  schemas.CreateUserInput:
    properties:
      birthday:
        type: string
      codeforces:
        type: string
      department:
        type: string
      email:
        type: string
      expected_graduation_date:
        type: string
      github:
        type: string
      hackerrank:
        type: string
      instagram:
        type: string
      leetcode:
        type: string
      linkedin:
        type: string
      name:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      student_id:
        type: string
      telegram_uid:
        type: string
      telegram_username:
        type: string
      university:
        type: string
    required:
    - email
    type: object
  schemas.ErrorResponse:
    properties:
      code:
        type: integer
      details:
        type: string
      message:
        type: string
    type: object
  schemas.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  schemas.LoginResponse:
    properties:
      message:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/schemas.ResponseUser'
    type: object
  schemas.PaginatedUsers:
    properties:
      data:
        items:
          $ref: '#/definitions/entity.User'
        type: array
      meta:
        $ref: '#/definitions/schemas.PaginationMeta'
    type: object
  schemas.PaginationMeta:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  schemas.ResponseUser:
    properties:
      birthday:
        description: Personal Information
        type: string
      code_of_conduct:
        type: string
      codeforces:
        type: string
      config:
        type: string
      country_id:
        type: integer
      created_at:
        description: Timestamps
        type: string
      cv:
        description: Professional Details
        type: string
      department:
        type: string
      email:
        type: string
      expected_graduation_date:
        type: string
      gender:
        type: string
      github:
        type: string
      group_id:
        type: integer
      hackerrank:
        type: string
      id:
        description: Core Identity Fields
        type: integer
      inactive:
        type: boolean
      instagram:
        type: string
      joined_date:
        type: string
      leetcode:
        description: |-
          Coding Profiles (optional)
          Use pointer types so that if no value is provided, they remain nil.
        type: string
      linkedin:
        description: Social Media (all optional)
        type: string
      mentor_name:
        type: string
      name:
        type: string
      phone:
        description: Contact Information
        type: string
      photo:
        description: System Fields
        type: string
      preferred_language:
        type: string
      role_id:
        description: Default role ID (adjust as necessary)
        type: integer
      short_bio:
        type: string
      student_id:
        type: string
      telegram_uid:
        type: string
      telegram_username:
        type: string
      tshirt_color:
        description: Physical Attributes
        type: string
      tshirt_size:
        type: string
      university:
        description: Academic Information
        type: string
      updated_at:
        type: string
    type: object
  schemas.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  schemas.UpdateUserInput:
    properties:
      birthday:
        type: string
      codeforces:
        type: string
      department:
        type: string
      email:
        type: string
      expected_graduation_date:
        type: string
      github:
        type: string
      hackerrank:
        type: string
      instagram:
        type: string
      leetcode:
        type: string
      linkedin:
        type: string
      name:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      student_id:
        type: string
      telegram_uid:
        type: string
      telegram_username:
        type: string
      university:
        type: string
    type: object
host: https://yene-hub-ls0y.onrender.com
info:
  contact:
    email: support@hub.a2sv.org
    name: API Support
  description: This is the API documentation for the Hub backend.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Hub API
  version: "1.0"
paths:
  /api/auth/google:
    get:
      description: Redirects to Google's OAuth2 authentication page
      produces:
      - application/json
      responses:
        "302":
          description: Redirect to Google OAuth
        "500":
          description: OAuth configuration error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Start Google OAuth
      tags:
      - Authentication
  /api/auth/google/callback:
    get:
      description: Handle Google OAuth callback and return JWT token
      parameters:
      - description: Authorization code from Google
        in: query
        name: code
        required: true
        type: string
      - description: OAuth state parameter
        in: query
        name: state
        type: string
      - description: OAuth error description
        in: query
        name: error
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Authentication token
          schema:
            $ref: '#/definitions/schemas.AuthTokenResponse'
        "400":
          description: Missing code parameter
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Unauthorized/Unverified email
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Token exchange error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Google OAuth callback
      tags:
      - Authentication
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/schemas.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/schemas.LoginResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: User login
      tags:
      - Auth
  /api/countries:
    get:
      description: Get a list of all countries
      produces:
      - application/json
      responses:
        "200":
          description: List of countries
          schema:
            items:
              $ref: '#/definitions/entity.Country'
            type: array
      summary: List countries
      tags:
      - Countries
    post:
      consumes:
      - application/json
      description: Create a new country entry
      parameters:
      - description: Country data
        in: body
        name: country
        required: true
        schema:
          $ref: '#/definitions/entity.Country'
      produces:
      - application/json
      responses:
        "201":
          description: Country created successfully
          schema:
            $ref: '#/definitions/entity.Country'
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new country
      tags:
      - Countries
  /api/countries/{id}:
    delete:
      description: Delete a country by its ID
      parameters:
      - description: Country ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Country deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid country ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Country not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a country
      tags:
      - Countries
    get:
      description: Get a country by its ID
      parameters:
      - description: Country ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Country details
          schema:
            $ref: '#/definitions/entity.Country'
        "400":
          description: Invalid country ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Country not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get country by ID
      tags:
      - Countries
    patch:
      consumes:
      - application/json
      description: Update a country by its ID
      parameters:
      - description: Country ID
        in: path
        name: id
        required: true
        type: integer
      - description: Country data
        in: body
        name: country
        required: true
        schema:
          $ref: '#/definitions/entity.Country'
      produces:
      - application/json
      responses:
        "200":
          description: Country updated successfully
          schema:
            $ref: '#/definitions/entity.Country'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a country
      tags:
      - Countries
  /api/groups:
    get:
      description: Get a list of all groups
      produces:
      - application/json
      responses:
        "200":
          description: List of groups
          schema:
            items:
              $ref: '#/definitions/entity.Group'
            type: array
      summary: List groups
      tags:
      - Groups
    post:
      consumes:
      - application/json
      description: Create a new group entry
      parameters:
      - description: Group data
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/entity.Group'
      produces:
      - application/json
      responses:
        "201":
          description: Group created successfully
          schema:
            $ref: '#/definitions/entity.Group'
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new group
      tags:
      - Groups
  /api/groups/{id}:
    delete:
      description: Delete a group by its ID
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Group deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid group ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Group not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a group
      tags:
      - Groups
    get:
      description: Get a group by its ID
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Group details
          schema:
            $ref: '#/definitions/entity.Group'
        "400":
          description: Invalid group ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Group not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get group by ID
      tags:
      - Groups
    patch:
      consumes:
      - application/json
      description: Update a group by its ID
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      - description: Group data
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/entity.Group'
      produces:
      - application/json
      responses:
        "200":
          description: Group updated successfully
          schema:
            $ref: '#/definitions/entity.Group'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a group
      tags:
      - Groups
  /api/groups/country/{country_id}:
    get:
      description: Get a list of groups by country ID
      parameters:
      - description: Country ID
        in: path
        name: country_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of groups
          schema:
            items:
              $ref: '#/definitions/entity.Group'
            type: array
      summary: List groups by country ID
      tags:
      - Groups
  /api/problems:
    get:
      description: Get a list of all problems
      produces:
      - application/json
      responses:
        "200":
          description: List of problems
          schema:
            items:
              $ref: '#/definitions/entity.Problem'
            type: array
      summary: List problems
      tags:
      - Problems
    post:
      consumes:
      - application/json
      description: Create a new problem entry
      parameters:
      - description: Problem data
        in: body
        name: problem
        required: true
        schema:
          $ref: '#/definitions/entity.Problem'
      produces:
      - application/json
      responses:
        "201":
          description: Problem created successfully
          schema:
            $ref: '#/definitions/entity.Problem'
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new problem
      tags:
      - Problems
  /api/problems/{id}:
    delete:
      description: Delete a problem by its ID
      parameters:
      - description: Problem ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Problem deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid problem ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Problem not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a problem
      tags:
      - Problems
    get:
      description: Get a problem by its ID
      parameters:
      - description: Problem ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Problem details
          schema:
            $ref: '#/definitions/entity.Problem'
        "400":
          description: Invalid problem ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Problem not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get problem by ID
      tags:
      - Problems
    patch:
      consumes:
      - application/json
      description: Update a problem by its ID
      parameters:
      - description: Problem ID
        in: path
        name: id
        required: true
        type: integer
      - description: Problem data
        in: body
        name: problem
        required: true
        schema:
          $ref: '#/definitions/entity.Problem'
      produces:
      - application/json
      responses:
        "200":
          description: Problem updated successfully
          schema:
            $ref: '#/definitions/entity.Problem'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a problem
      tags:
      - Problems
  /api/problems/name/{name}:
    get:
      description: Get a problem by its name
      parameters:
      - description: Problem name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Problem details
          schema:
            $ref: '#/definitions/entity.Problem'
        "400":
          description: Invalid problem name
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Problem not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get problem by name
      tags:
      - Problems
  /api/recent-actions:
    get:
      description: Get a list of all recent user actions
      produces:
      - application/json
      responses:
        "200":
          description: List of recent actions
          schema:
            items:
              $ref: '#/definitions/entity.RecentAction'
            type: array
      summary: List recent actions
      tags:
      - RecentActions
    post:
      consumes:
      - application/json
      description: Create a new recent user action
      parameters:
      - description: Recent action details
        in: body
        name: recentAction
        required: true
        schema:
          $ref: '#/definitions/entity.RecentAction'
      produces:
      - application/json
      responses:
        "201":
          description: Recent action created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create recent action
      tags:
      - RecentActions
  /api/recent-actions/{id}:
    delete:
      description: Delete a recent user action
      parameters:
      - description: Recent Action ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Recent action deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete recent action
      tags:
      - RecentActions
    get:
      description: Get details of a recent action by its ID
      parameters:
      - description: Recent Action ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Recent action details
          schema:
            $ref: '#/definitions/entity.RecentAction'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get recent action by ID
      tags:
      - RecentActions
    put:
      consumes:
      - application/json
      description: Update a recent user action
      parameters:
      - description: Recent Action ID
        in: path
        name: id
        required: true
        type: integer
      - description: Recent action details
        in: body
        name: recentAction
        required: true
        schema:
          $ref: '#/definitions/entity.RecentAction'
      produces:
      - application/json
      responses:
        "200":
          description: Recent action updated
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update recent action
      tags:
      - RecentActions
  /api/recent-actions/type/{action_type}:
    get:
      description: Get a list of recent actions for a specific type
      parameters:
      - description: Action Type
        in: path
        name: action_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of recent actions for the type
          schema:
            items:
              $ref: '#/definitions/entity.RecentAction'
            type: array
      summary: Get recent actions by type
      tags:
      - RecentActions
  /api/recent-actions/user/{user_id}:
    get:
      description: Get a list of recent actions for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of recent actions for the user
          schema:
            items:
              $ref: '#/definitions/entity.RecentAction'
            type: array
        "400":
          description: Invalid user ID
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get recent actions by user ID
      tags:
      - RecentActions
  /api/registration/bulk:
    post:
      consumes:
      - application/json
      description: Register multiple users with the provided information
      parameters:
      - description: Bulk registration data
        in: body
        name: bulk-registration
        required: true
        schema:
          $ref: '#/definitions/handlers.BulkRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Bulk registration processed
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Register multiple users in bulk
      tags:
      - Registration
  /api/registration/role/{role_id}:
    post:
      consumes:
      - application/json
      description: Register multiple users with the provided information and a specific
        role ID
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      - description: Registration data
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/handlers.RegistrationParam'
      produces:
      - application/json
      responses:
        "200":
          description: Bulk registration processed
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Register multiple users with a specific role
      tags:
      - Registration
  /api/roles:
    get:
      description: Get a list of all roles
      produces:
      - application/json
      responses:
        "200":
          description: List of roles
          schema:
            items:
              $ref: '#/definitions/entity.Role'
            type: array
      summary: List roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Create a new role entry
      parameters:
      - description: Role data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/entity.Role'
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            $ref: '#/definitions/entity.Role'
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new role
      tags:
      - Roles
  /api/roles/{id}:
    delete:
      description: Delete a role by its ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid role ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a role
      tags:
      - Roles
    get:
      description: Get a role by its ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role details
          schema:
            $ref: '#/definitions/entity.Role'
        "400":
          description: Invalid role ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get role by ID
      tags:
      - Roles
    patch:
      consumes:
      - application/json
      description: Update a role by its ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/entity.Role'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            $ref: '#/definitions/entity.Role'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a role
      tags:
      - Roles
  /api/sessions:
    get:
      description: Get a list of all sessions
      produces:
      - application/json
      responses:
        "200":
          description: List of sessions
          schema:
            items:
              $ref: '#/definitions/entity.Session'
            type: array
      summary: List sessions
      tags:
      - Sessions
    post:
      consumes:
      - application/json
      description: Create a new session for a user
      parameters:
      - description: Session data
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/entity.Session'
      produces:
      - application/json
      responses:
        "201":
          description: Session created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new session
      tags:
      - Sessions
  /api/sessions/{id}:
    delete:
      description: Delete a session by its ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Session deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid session ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Session not found
          schema:
            additionalProperties: true
            type: object
      summary: Delete a session
      tags:
      - Sessions
    get:
      description: Get a session by its ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Session details
          schema:
            $ref: '#/definitions/entity.Session'
        "400":
          description: Invalid session ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Session not found
          schema:
            additionalProperties: true
            type: object
      summary: Get session by ID
      tags:
      - Sessions
    patch:
      consumes:
      - application/json
      description: Update a session by its ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      - description: Session data
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/entity.Session'
      produces:
      - application/json
      responses:
        "200":
          description: Session updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Session not found
          schema:
            additionalProperties: true
            type: object
      summary: Update a session
      tags:
      - Sessions
  /api/sessions/name/{name}:
    get:
      description: Get a session by its name
      parameters:
      - description: Session name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session details
          schema:
            items:
              $ref: '#/definitions/entity.Session'
            type: array
      summary: Get session by name
      tags:
      - Sessions
  /api/sessions/start-time/{start_time}:
    get:
      description: Get a session by its start time
      parameters:
      - description: Session start time
        in: path
        name: start_time
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session details
          schema:
            items:
              $ref: '#/definitions/entity.Session'
            type: array
      summary: Get session by start time
      tags:
      - Sessions
  /api/stipends:
    get:
      description: Get a list of all stipends
      produces:
      - application/json
      responses:
        "200":
          description: List of stipends
          schema:
            items:
              $ref: '#/definitions/entity.Stipend'
            type: array
        "400":
          description: Failed to fetch stippends
          schema:
            additionalProperties: true
            type: object
      summary: List stipends
      tags:
      - Stipends
    post:
      consumes:
      - application/json
      description: Create a new stipend entry
      parameters:
      - description: Stipend data
        in: body
        name: stipend
        required: true
        schema:
          $ref: '#/definitions/entity.Stipend'
      produces:
      - application/json
      responses:
        "201":
          description: Stipend created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
      summary: Create a new stipend
      tags:
      - Stipends
  /api/stipends/{stippend_id}:
    delete:
      description: Delete a stipend by its ID
      parameters:
      - description: Stipend ID
        in: path
        name: stippend_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Stipend deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid stipend ID
          schema:
            additionalProperties: true
            type: object
      summary: Delete a stipend
      tags:
      - Stipends
    get:
      description: Get a stipend by its ID
      parameters:
      - description: Stipend ID
        in: path
        name: stippend_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Stipend details
          schema:
            $ref: '#/definitions/entity.Stipend'
        "400":
          description: Invalid stipend ID
          schema:
            additionalProperties: true
            type: object
      summary: Get stipend by ID
      tags:
      - Stipends
    patch:
      consumes:
      - application/json
      description: Update a stipend by its ID
      parameters:
      - description: Stipend ID
        in: path
        name: stippend_id
        required: true
        type: integer
      - description: Stipend data
        in: body
        name: stipend
        required: true
        schema:
          $ref: '#/definitions/entity.Stipend'
      produces:
      - application/json
      responses:
        "200":
          description: Stipend updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
      summary: Update a stipend
      tags:
      - Stipends
  /api/submissions:
    get:
      description: Get a list of all submissions
      produces:
      - application/json
      responses:
        "200":
          description: List of submissions
          schema:
            items:
              $ref: '#/definitions/entity.Submission'
            type: array
      summary: List submissions
      tags:
      - Submissions
    post:
      consumes:
      - application/json
      description: Create a new submission entry
      parameters:
      - description: Submission data
        in: body
        name: submission
        required: true
        schema:
          $ref: '#/definitions/entity.Submission'
      produces:
      - application/json
      responses:
        "201":
          description: Submission created successfully
          schema:
            $ref: '#/definitions/entity.Submission'
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new submission
      tags:
      - Submissions
  /api/submissions/{id}:
    get:
      description: Get a submission by its ID
      parameters:
      - description: Submission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Submission details
          schema:
            $ref: '#/definitions/entity.Submission'
        "400":
          description: Invalid submission ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Submission not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get submission by ID
      tags:
      - Submissions
  /api/submissions/problem/{problem_id}:
    get:
      description: Get submissions for a specific problem
      parameters:
      - description: Problem ID
        in: path
        name: problem_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Submissions for problem
          schema:
            items:
              $ref: '#/definitions/entity.Submission'
            type: array
        "400":
          description: Invalid problem ID
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get submissions by problem ID
      tags:
      - Submissions
  /api/submissions/user/{user_id}:
    get:
      description: Get submissions for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Submissions for user
          schema:
            items:
              $ref: '#/definitions/entity.Submission'
            type: array
        "400":
          description: Invalid user ID
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get submissions by user ID
      tags:
      - Submissions
  /api/super_groups:
    get:
      description: Get a list of all super groups
      produces:
      - application/json
      responses:
        "200":
          description: List of super groups
          schema:
            items:
              $ref: '#/definitions/entity.SuperGroup'
            type: array
      summary: List super groups
      tags:
      - SuperGroups
    post:
      consumes:
      - application/json
      description: Create a new super group entry
      parameters:
      - description: SuperGroup data
        in: body
        name: super_group
        required: true
        schema:
          $ref: '#/definitions/entity.SuperGroup'
      produces:
      - application/json
      responses:
        "201":
          description: Super group created successfully
          schema:
            $ref: '#/definitions/entity.SuperGroup'
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new super group
      tags:
      - SuperGroups
  /api/super_groups/{id}:
    delete:
      description: Delete a super group by its ID
      parameters:
      - description: SuperGroup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Super group deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid super group ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Super group not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a super group
      tags:
      - SuperGroups
    get:
      description: Get a super group by its ID
      parameters:
      - description: SuperGroup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Super group details
          schema:
            $ref: '#/definitions/entity.SuperGroup'
        "400":
          description: Invalid super group ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Super group not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get super group by ID
      tags:
      - SuperGroups
    patch:
      consumes:
      - application/json
      description: Update a super group by its ID
      parameters:
      - description: SuperGroup ID
        in: path
        name: id
        required: true
        type: integer
      - description: SuperGroup data
        in: body
        name: super_group
        required: true
        schema:
          $ref: '#/definitions/entity.SuperGroup'
      produces:
      - application/json
      responses:
        "200":
          description: Super group updated successfully
          schema:
            $ref: '#/definitions/entity.SuperGroup'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a super group
      tags:
      - SuperGroups
  /api/super_to_groups:
    get:
      description: Get a list of all super to groups
      produces:
      - application/json
      responses:
        "200":
          description: List of super to groups
          schema:
            items:
              $ref: '#/definitions/entity.SuperToGroup'
            type: array
      summary: List super to groups
      tags:
      - SuperToGroups
    post:
      consumes:
      - application/json
      description: Create a new super to group entry
      parameters:
      - description: SuperToGroup data
        in: body
        name: super_to_group
        required: true
        schema:
          $ref: '#/definitions/entity.SuperToGroup'
      produces:
      - application/json
      responses:
        "201":
          description: Super to group created successfully
          schema:
            $ref: '#/definitions/entity.SuperToGroup'
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new super to group
      tags:
      - SuperToGroups
  /api/super_to_groups/{id}:
    delete:
      description: Delete a super to group by its ID
      parameters:
      - description: SuperToGroup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Super to group deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid super to group ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Super to group not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a super to group
      tags:
      - SuperToGroups
    get:
      description: Get a super to group by its ID
      parameters:
      - description: SuperToGroup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Super to group details
          schema:
            $ref: '#/definitions/entity.SuperToGroup'
        "400":
          description: Invalid super to group ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Super to group not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get super to group by ID
      tags:
      - SuperToGroups
    patch:
      consumes:
      - application/json
      description: Update a super to group by its ID
      parameters:
      - description: SuperToGroup ID
        in: path
        name: id
        required: true
        type: integer
      - description: SuperToGroup data
        in: body
        name: super_to_group
        required: true
        schema:
          $ref: '#/definitions/entity.SuperToGroup'
      produces:
      - application/json
      responses:
        "200":
          description: Super to group updated successfully
          schema:
            $ref: '#/definitions/entity.SuperToGroup'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a super to group
      tags:
      - SuperToGroups
  /api/tracks:
    get:
      description: Get a list of all tracks
      produces:
      - application/json
      responses:
        "200":
          description: List of tracks
          schema:
            items:
              $ref: '#/definitions/entity.Track'
            type: array
      summary: List tracks
      tags:
      - Tracks
    post:
      consumes:
      - application/json
      description: Create a new track entry
      parameters:
      - description: Track data
        in: body
        name: track
        required: true
        schema:
          $ref: '#/definitions/entity.Track'
      produces:
      - application/json
      responses:
        "201":
          description: Track created successfully
          schema:
            $ref: '#/definitions/entity.Track'
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new track
      tags:
      - Tracks
  /api/tracks/{id}:
    delete:
      description: Delete a track by its ID
      parameters:
      - description: Track ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Track deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid track ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Track not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a track
      tags:
      - Tracks
    get:
      description: Get a track by its ID
      parameters:
      - description: Track ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Track details
          schema:
            $ref: '#/definitions/entity.Track'
        "400":
          description: Invalid track ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Track not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get track by ID
      tags:
      - Tracks
    patch:
      consumes:
      - application/json
      description: Update a track by its ID
      parameters:
      - description: Track ID
        in: path
        name: id
        required: true
        type: integer
      - description: Track data
        in: body
        name: track
        required: true
        schema:
          $ref: '#/definitions/entity.Track'
      produces:
      - application/json
      responses:
        "200":
          description: Track updated successfully
          schema:
            $ref: '#/definitions/entity.Track'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a track
      tags:
      - Tracks
  /api/tracks/name/{name}:
    get:
      description: Get a track by its name
      parameters:
      - description: Track Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Track details
          schema:
            $ref: '#/definitions/entity.Track'
        "400":
          description: Invalid track name
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Track not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get track by name
      tags:
      - Tracks
  /api/users:
    get:
      description: Get paginated list of users with optional filters
      parameters:
      - default: 0
        description: Page number
        in: query
        minimum: 0
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            $ref: '#/definitions/schemas.PaginatedUsers'
        "400":
          description: Invalid pagination parameters
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user account with required information
      parameters:
      - description: User creation data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created user
          schema:
            $ref: '#/definitions/schemas.ResponseUser'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
  /api/users/{id}:
    delete:
      description: Permanently delete a user account and associated data
      parameters:
      - description: User ID
        format: uint32
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user account
      tags:
      - Users
    get:
      description: Get detailed information about a specific user
      parameters:
      - description: User ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/schemas.ResponseUser'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user details
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Update existing user information. Only provided fields will be
        updated.
      parameters:
      - description: User ID
        format: uint32
        in: path
        name: id
        required: true
        type: integer
      - description: Partial user data for update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/schemas.SuccessResponse'
        "400":
          description: Invalid ID format or request body
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user details
      tags:
      - Users
  /api/votes:
    get:
      description: Get a list of votes
      produces:
      - application/json
      responses:
        "200":
          description: List of votes
          schema:
            items:
              $ref: '#/definitions/entity.Vote'
            type: array
      summary: List votes
      tags:
      - Votes
    post:
      consumes:
      - application/json
      description: Create a new vote entry
      parameters:
      - description: Vote data
        in: body
        name: vote
        required: true
        schema:
          $ref: '#/definitions/entity.Vote'
      produces:
      - application/json
      responses:
        "201":
          description: Vote created successfully
          schema:
            $ref: '#/definitions/entity.Vote'
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new vote
      tags:
      - Votes
  /api/votes/{id}:
    delete:
      description: Delete a vote by its ID
      parameters:
      - description: Vote ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Vote deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid vote ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Vote not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a vote
      tags:
      - Votes
    get:
      description: Get a vote by its ID
      parameters:
      - description: Vote ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Vote details
          schema:
            $ref: '#/definitions/entity.Vote'
        "400":
          description: Invalid vote ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Vote not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get vote by ID
      tags:
      - Votes
    patch:
      consumes:
      - application/json
      description: Update a vote by its ID
      parameters:
      - description: Vote ID
        in: path
        name: id
        required: true
        type: integer
      - description: Vote data
        in: body
        name: vote
        required: true
        schema:
          $ref: '#/definitions/entity.Vote'
      produces:
      - application/json
      responses:
        "200":
          description: Vote updated successfully
          schema:
            $ref: '#/definitions/entity.Vote'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a vote
      tags:
      - Votes
  /api/votes/comment/{comment_id}:
    get:
      description: Get votes for a specific comment
      parameters:
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Votes for comment
          schema:
            items:
              $ref: '#/definitions/entity.Vote'
            type: array
        "400":
          description: Invalid comment ID
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get votes by comment ID
      tags:
      - Votes
  /api/votes/post/{post_id}:
    get:
      description: Get votes for a specific post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Votes for post
          schema:
            items:
              $ref: '#/definitions/entity.Vote'
            type: array
        "400":
          description: Invalid post ID
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get votes by post ID
      tags:
      - Votes
  /api/votes/problem/{problem_id}:
    get:
      description: Get votes for a specific problem
      parameters:
      - description: Problem ID
        in: path
        name: problem_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Votes for problem
          schema:
            items:
              $ref: '#/definitions/entity.Vote'
            type: array
        "400":
          description: Invalid problem ID
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get votes by problem ID
      tags:
      - Votes
  /api/votes/submission/{submission_id}:
    get:
      description: Get votes for a specific submission
      parameters:
      - description: Submission ID
        in: path
        name: submission_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Votes for submission
          schema:
            items:
              $ref: '#/definitions/entity.Vote'
            type: array
        "400":
          description: Invalid submission ID
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get votes by submission ID
      tags:
      - Votes
  /api/votes/track/{track_id}:
    get:
      description: Get votes for a specific track
      parameters:
      - description: Track ID
        in: path
        name: track_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Votes for track
          schema:
            items:
              $ref: '#/definitions/entity.Vote'
            type: array
        "400":
          description: Invalid track ID
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get votes by track ID
      tags:
      - Votes
  /api/votes/user/{user_id}:
    get:
      description: Get votes for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Votes for user
          schema:
            items:
              $ref: '#/definitions/entity.Vote'
            type: array
        "400":
          description: Invalid user ID
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get votes by user ID
      tags:
      - Votes
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
