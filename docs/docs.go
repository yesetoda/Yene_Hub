// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@hub.a2sv.org"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/google": {
            "get": {
                "description": "Initiates the OAuth2 flow by redirecting to Google's authentication page",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Start Google OAuth",
                "responses": {
                    "302": {
                        "description": "Redirect to Google OAuth",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to initiate OAuth flow",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/google/callback": {
            "get": {
                "description": "Process Google OAuth callback, verify user, and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Handle Google OAuth callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth2 authorization code from Google",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OAuth state for CSRF protection",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Error message from OAuth provider",
                        "name": "error",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authentication successful",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid authorization code",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not registered or email not verified",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Invalid OAuth state",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "description": "Authenticate a user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/countries": {
            "get": {
                "description": "Get a list of all countries",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Countries"
                ],
                "summary": "List countries",
                "responses": {
                    "200": {
                        "description": "List of countries",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new country entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Countries"
                ],
                "summary": "Create a new country",
                "parameters": [
                    {
                        "description": "Country data",
                        "name": "country",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateCountryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Country created successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/countries/{id}": {
            "get": {
                "description": "Get a country by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Countries"
                ],
                "summary": "Get country by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Country ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Country details",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid country ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Country not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a country by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Countries"
                ],
                "summary": "Delete a country",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Country ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Country deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid country ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Country not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a country by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Countries"
                ],
                "summary": "Update country",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Country ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Country data",
                        "name": "country",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateCountryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Country updated successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or country ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Country not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/groups": {
            "get": {
                "description": "Get a list of all groups",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "List groups",
                "responses": {
                    "200": {
                        "description": "List of groups",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new group entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Create a new group",
                "parameters": [
                    {
                        "description": "Group data",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Group created successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/groups/country/{country_id}": {
            "get": {
                "description": "Get a list of groups by country ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "List groups by country ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Country ID",
                        "name": "country_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of groups",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/groups/{id}": {
            "get": {
                "description": "Get a group by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Get group by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Group details",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid group ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a group by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Delete a group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Group deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid group ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a group by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Update group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Group data",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Group updated successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or group ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/problems": {
            "get": {
                "description": "Get a list of all problems",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Problems"
                ],
                "summary": "List problems",
                "responses": {
                    "200": {
                        "description": "List of problems",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new problem entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Problems"
                ],
                "summary": "Create a new problem",
                "parameters": [
                    {
                        "description": "Problem data",
                        "name": "problem",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateProblemRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Problem created successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/problems/name/{name}": {
            "get": {
                "description": "Get a problem by its name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Problems"
                ],
                "summary": "Get problem by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Problem name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Problem details",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid problem name",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Problem not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/problems/{id}": {
            "get": {
                "description": "Get a problem by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Problems"
                ],
                "summary": "Get problem by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Problem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Problem details",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid problem ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Problem not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a problem by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Problems"
                ],
                "summary": "Delete a problem",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Problem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Problem deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid problem ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Problem not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a problem by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Problems"
                ],
                "summary": "Update a problem",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Problem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Problem data",
                        "name": "problem",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateProblemRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Problem updated successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or problem ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Problem not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/recent_actions": {
            "get": {
                "description": "Get a list of all recent user actions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RecentActions"
                ],
                "summary": "List recent actions",
                "responses": {
                    "200": {
                        "description": "List of recent actions",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new recent user action",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RecentActions"
                ],
                "summary": "Create recent action",
                "parameters": [
                    {
                        "description": "Recent action details",
                        "name": "recentAction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateRecentActionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Recent action created",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/recent_actions/type/{action_type}": {
            "get": {
                "description": "Get a list of recent actions for a specific type",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RecentActions"
                ],
                "summary": "Get recent actions by type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Action Type",
                        "name": "action_type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of recent actions for the type",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid action type",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/recent_actions/user/{user_id}": {
            "get": {
                "description": "Get a list of recent actions for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RecentActions"
                ],
                "summary": "Get recent actions by user ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of recent actions for the user",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/recent_actions/{id}": {
            "get": {
                "description": "Get details of a recent action by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RecentActions"
                ],
                "summary": "Get recent action by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Recent Action ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recent action details",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a recent user action",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RecentActions"
                ],
                "summary": "Delete recent action",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Recent Action ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recent action deleted",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Recent action not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a recent user action",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RecentActions"
                ],
                "summary": "Update recent action",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Recent Action ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Recent action details",
                        "name": "recentAction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateRecentActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recent action updated",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Recent action not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/registration/bulk": {
            "post": {
                "description": "Register multiple users with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registration"
                ],
                "summary": "Register multiple users in bulk",
                "parameters": [
                    {
                        "description": "Bulk registration data",
                        "name": "bulk-registration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bulk registration processed",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/registration/role/{role_id}": {
            "post": {
                "description": "Register multiple users with the provided information and a specific role ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registration"
                ],
                "summary": "Register multiple users with a specific role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "role_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Registration data",
                        "name": "registration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegistrationParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bulk registration processed",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/roles": {
            "get": {
                "description": "Get a paginated list of roles",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "List roles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of roles retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new role with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Create role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Role creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Role created successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/roles/{id}": {
            "get": {
                "description": "Get detailed information about a specific role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Get role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid role ID format",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Role not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Delete role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid role ID format",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Role not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update an existing role's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Update role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role updated successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or role ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Role not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/sessions": {
            "get": {
                "description": "Get a list of all sessions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "List sessions",
                "responses": {
                    "200": {
                        "description": "List of sessions",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new session for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Create a new session",
                "parameters": [
                    {
                        "description": "Session data",
                        "name": "session",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Session created successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/sessions/name/{name}": {
            "get": {
                "description": "Get a session by its name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Get session by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session details",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid session name",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/sessions/start-time/{start_time}": {
            "get": {
                "description": "Get a session by its start time",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Get session by start time",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session start time",
                        "name": "start_time",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session details",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid session start time",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/sessions/{id}": {
            "get": {
                "description": "Get a session by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Get session by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session details",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid session ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a session by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Delete a session",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid session ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a session by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Update a session",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Session data",
                        "name": "session",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session updated successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/stipends": {
            "get": {
                "description": "Get a list of all stipends",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stipends"
                ],
                "summary": "List stipends",
                "responses": {
                    "200": {
                        "description": "List of stipends",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Failed to fetch stippends",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new stipend entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stipends"
                ],
                "summary": "Create a new stipend",
                "parameters": [
                    {
                        "description": "Stipend data",
                        "name": "stipend",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateStipendRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Stipend created successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/stipends/{stippend_id}": {
            "get": {
                "description": "Get a stipend by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stipends"
                ],
                "summary": "Get stipend by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stipend ID",
                        "name": "stippend_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stipend details",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid stipend ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Stipend not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a stipend by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stipends"
                ],
                "summary": "Delete a stipend",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stipend ID",
                        "name": "stippend_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stipend deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid stipend ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Stipend not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a stipend by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stipends"
                ],
                "summary": "Update a stipend",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stipend ID",
                        "name": "stippend_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Stipend data",
                        "name": "stipend",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateStipendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stipend updated successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/submissions": {
            "get": {
                "description": "Get a list of all submissions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submissions"
                ],
                "summary": "List submissions",
                "responses": {
                    "200": {
                        "description": "List of submissions",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new submission entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submissions"
                ],
                "summary": "Create a new submission",
                "parameters": [
                    {
                        "description": "Submission data",
                        "name": "submission",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateSubmissionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Submission created successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/submissions/problem/{problem_id}": {
            "get": {
                "description": "Get submissions for a specific problem",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submissions"
                ],
                "summary": "Get submissions by problem ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Problem ID",
                        "name": "problem_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Submissions for problem",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid problem ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/submissions/user/{user_id}": {
            "get": {
                "description": "Get submissions for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submissions"
                ],
                "summary": "Get submissions by user ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Submissions for user",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/submissions/{id}": {
            "get": {
                "description": "Get a submission by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submissions"
                ],
                "summary": "Get submission by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Submission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Submission details",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid submission ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Submission not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/super-groups/{super_group_id}/groups": {
            "post": {
                "description": "Associate one or more groups with a super group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SuperGroups"
                ],
                "summary": "Add groups to a super group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Super Group ID",
                        "name": "super_group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Group IDs to associate",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.SuperToGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Groups added to super group successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or super group ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Super group not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/super_groups": {
            "get": {
                "description": "Get a list of all super groups",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SuperGroups"
                ],
                "summary": "List super groups",
                "responses": {
                    "200": {
                        "description": "List of super groups",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new super group entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SuperGroups"
                ],
                "summary": "Create a new super group",
                "parameters": [
                    {
                        "description": "SuperGroup data",
                        "name": "super_group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateSuperGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Super group created successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/super_groups/{id}": {
            "get": {
                "description": "Get a super group by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SuperGroups"
                ],
                "summary": "Get super group by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SuperGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Super group details",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid super group ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Super group not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a super group by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SuperGroups"
                ],
                "summary": "Delete a super group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SuperGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Super group deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid super group ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Super group not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a super group by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SuperGroups"
                ],
                "summary": "Update a super group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SuperGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "SuperGroup data",
                        "name": "super_group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateSuperGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Super group updated successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/super_to_groups": {
            "get": {
                "description": "Get a list of all super to groups",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SuperToGroups"
                ],
                "summary": "List super to groups",
                "responses": {
                    "200": {
                        "description": "List of super to groups",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    }
                }
            }
        },
        "/api/super_to_groups/{id}": {
            "get": {
                "description": "Get a super to group by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SuperToGroups"
                ],
                "summary": "Get super to group by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SuperToGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Super to group details",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid super to group ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Super to group not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a super to group by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SuperToGroups"
                ],
                "summary": "Delete a super to group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SuperToGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Super to group deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid super to group ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Super to group not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a super to group by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SuperToGroups"
                ],
                "summary": "Update a super to group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SuperToGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "SuperToGroup data",
                        "name": "super_to_group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.SuperToGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Super to group updated successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/tracks": {
            "get": {
                "description": "Get a list of all tracks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tracks"
                ],
                "summary": "List tracks",
                "responses": {
                    "200": {
                        "description": "List of tracks",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new track entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tracks"
                ],
                "summary": "Create a new track",
                "parameters": [
                    {
                        "description": "Track data",
                        "name": "track",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateTrackRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Track created successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/tracks/name/{name}": {
            "get": {
                "description": "Get a track by its name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tracks"
                ],
                "summary": "Get track by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Track Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Track details",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid track name",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Track not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/tracks/{id}": {
            "get": {
                "description": "Get a track by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tracks"
                ],
                "summary": "Get track by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Track ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Track details",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid track ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Track not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a track by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tracks"
                ],
                "summary": "Delete a track",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Track ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Track deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid track ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Track not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a track by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tracks"
                ],
                "summary": "Update a track",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Track ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Track data",
                        "name": "track",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateTrackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Track updated successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "description": "Get a paginated list of users with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term for filtering users",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Filter by role ID",
                        "name": "role_id",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Filter by group ID",
                        "name": "group_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user account with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - User already exists",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "description": "Get detailed information about a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update an existing user's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/votes": {
            "get": {
                "description": "Get a list of votes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Votes"
                ],
                "summary": "List votes",
                "responses": {
                    "200": {
                        "description": "List of votes",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new vote entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Votes"
                ],
                "summary": "Create a new vote",
                "parameters": [
                    {
                        "description": "Vote data",
                        "name": "vote",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateVoteRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Vote created successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/votes/comment/{comment_id}": {
            "get": {
                "description": "Get votes for a specific comment",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Votes"
                ],
                "summary": "Get votes by comment ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Comment ID",
                        "name": "comment_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Votes for comment",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid comment ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/votes/post/{post_id}": {
            "get": {
                "description": "Get votes for a specific post",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Votes"
                ],
                "summary": "Get votes by post ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "post_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Votes for post",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid post ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/votes/problem/{problem_id}": {
            "get": {
                "description": "Get votes for a specific problem",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Votes"
                ],
                "summary": "Get votes by problem ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Problem ID",
                        "name": "problem_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Votes for problem",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid problem ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/votes/submission/{submission_id}": {
            "get": {
                "description": "Get votes for a specific submission",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Votes"
                ],
                "summary": "Get votes by submission ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Submission ID",
                        "name": "submission_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Votes for submission",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid submission ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/votes/track/{track_id}": {
            "get": {
                "description": "Get votes for a specific track",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Votes"
                ],
                "summary": "Get votes by track ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Track ID",
                        "name": "track_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Votes for track",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid track ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/votes/user/{user_id}": {
            "get": {
                "description": "Get votes for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Votes"
                ],
                "summary": "Get votes by user ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Votes for user",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/votes/{id}": {
            "get": {
                "description": "Get a vote by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Votes"
                ],
                "summary": "Get vote by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Vote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vote details",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid vote ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Vote not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a vote by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Votes"
                ],
                "summary": "Delete a vote",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Vote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vote deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid vote ID",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Vote not found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a vote by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Votes"
                ],
                "summary": "Update a vote",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Vote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Vote data",
                        "name": "vote",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateVoteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vote updated successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/exercises": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exercises"
                ],
                "summary": "List all exercises",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/schemas.SuccessResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exercises"
                ],
                "summary": "Create a new exercise",
                "parameters": [
                    {
                        "description": "Exercise",
                        "name": "exercise",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateExerciseRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/exercises/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exercises"
                ],
                "summary": "Get an exercise by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Exercise ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Exercises"
                ],
                "summary": "Delete an exercise",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Exercise ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exercises"
                ],
                "summary": "Update an exercise",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Exercise ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Exercise",
                        "name": "exercise",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateExerciseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/groups/gid/:group_id/exercises": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exercises"
                ],
                "summary": "Get exercises by group ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/schemas.SuccessResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/problem-tracks/{id}": {
            "delete": {
                "description": "Remove a problem from a track by ProblemTrack ID",
                "tags": [
                    "ProblemTracks"
                ],
                "summary": "Remove a problem from a track",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ProblemTrack ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/problems/pid/:problem_id/exercises": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exercises"
                ],
                "summary": "Get exercises by problem ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Problem ID",
                        "name": "problem_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/schemas.SuccessResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tracks/tid/:track_id/exercises": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exercises"
                ],
                "summary": "Get exercises by track ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Track ID",
                        "name": "track_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/schemas.SuccessResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tracks/tid/{track_id}/problems": {
            "get": {
                "description": "Get all problems for a specific track",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProblemTracks"
                ],
                "summary": "List problems in a track",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Track ID",
                        "name": "track_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/schemas.SuccessResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a problem to a specific track",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProblemTracks"
                ],
                "summary": "Add a problem to a track",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Track ID",
                        "name": "track_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Problem",
                        "name": "problem",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.AddProblemToTrackRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tracks/tid/{track_id}/problems/by-difficulty": {
            "get": {
                "description": "Get problems in a track by difficulty",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProblemTracks"
                ],
                "summary": "Get problems in track by difficulty",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Track ID",
                        "name": "track_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Difficulty",
                        "name": "difficulty",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tracks/tid/{track_id}/problems/by-name": {
            "get": {
                "description": "Get a problem in a track by its name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProblemTracks"
                ],
                "summary": "Get problem in track by name",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Track ID",
                        "name": "track_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Problem name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tracks/tid/{track_id}/problems/by-platform": {
            "get": {
                "description": "Get problems in a track by platform",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProblemTracks"
                ],
                "summary": "Get problems in track by platform",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Track ID",
                        "name": "track_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Platform",
                        "name": "platform",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tracks/tid/{track_id}/problems/by-tag": {
            "get": {
                "description": "Get problems in a track by tag",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProblemTracks"
                ],
                "summary": "Get problems in track by tag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Track ID",
                        "name": "track_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Tag",
                        "name": "tag",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.BulkRegistrationRequest": {
            "type": "object",
            "required": [
                "emails",
                "group_id",
                "role_id"
            ],
            "properties": {
                "country_id": {
                    "type": "integer"
                },
                "emails": {
                    "type": "string"
                },
                "group_id": {
                    "type": "integer"
                },
                "role_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.RegistrationParam": {
            "description": "Registration data for bulk user registration with a role",
            "type": "object",
            "required": [
                "emails",
                "group_id"
            ],
            "properties": {
                "country_id": {
                    "type": "integer"
                },
                "emails": {
                    "type": "string"
                },
                "group_id": {
                    "type": "integer"
                }
            }
        },
        "schemas.AddProblemToTrackRequest": {
            "type": "object",
            "required": [
                "problem_id",
                "track_id"
            ],
            "properties": {
                "problem_id": {
                    "type": "integer"
                },
                "track_id": {
                    "type": "integer"
                }
            }
        },
        "schemas.CreateCountryRequest": {
            "type": "object",
            "required": [
                "code",
                "name"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "ET"
                },
                "name": {
                    "type": "string",
                    "example": "Ethiopia"
                }
            }
        },
        "schemas.CreateExerciseRequest": {
            "type": "object",
            "required": [
                "group_id",
                "problem_id",
                "track_id"
            ],
            "properties": {
                "group_id": {
                    "type": "integer"
                },
                "problem_id": {
                    "type": "integer"
                },
                "track_id": {
                    "type": "integer"
                }
            }
        },
        "schemas.CreateGroupRequest": {
            "type": "object",
            "required": [
                "country_id",
                "name"
            ],
            "properties": {
                "country_id": {
                    "type": "integer",
                    "example": 1
                },
                "description": {
                    "type": "string",
                    "example": "A competitive programming team"
                },
                "hoa_id": {
                    "type": "integer",
                    "example": 5
                },
                "name": {
                    "type": "string",
                    "example": "Team Alpha"
                },
                "short_name": {
                    "type": "string",
                    "example": "Alpha"
                }
            }
        },
        "schemas.CreateProblemRequest": {
            "type": "object",
            "required": [
                "description",
                "difficulty",
                "link",
                "name",
                "platform"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Find two numbers that add up to target"
                },
                "difficulty": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.Difficulty"
                        }
                    ],
                    "example": "medium"
                },
                "link": {
                    "type": "string",
                    "example": "https://leetcode.com/problems/two-sum"
                },
                "name": {
                    "description": "Required: true",
                    "type": "string",
                    "example": "Two Sum"
                },
                "platform": {
                    "type": "string",
                    "example": "leetcode"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['array'",
                        "'hash-table']"
                    ]
                }
            }
        },
        "schemas.CreateRecentActionRequest": {
            "type": "object",
            "required": [
                "action_type",
                "description",
                "entity_id",
                "entity_type",
                "user_id"
            ],
            "properties": {
                "action_type": {
                    "type": "string",
                    "example": "problem_solved"
                },
                "description": {
                    "type": "string",
                    "example": "Solved Two Sum problem"
                },
                "entity_id": {
                    "type": "integer",
                    "example": 123
                },
                "entity_type": {
                    "type": "string",
                    "example": "problem"
                },
                "user_id": {
                    "description": "Required: true",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "schemas.CreateRoleRequest": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Can moderate content"
                },
                "type": {
                    "description": "Required: true",
                    "type": "string",
                    "example": "Moderator"
                }
            }
        },
        "schemas.CreateSessionRequest": {
            "type": "object",
            "required": [
                "description",
                "end_time",
                "group_id",
                "host_id",
                "name",
                "start_time"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Introduction to Data Structures"
                },
                "end_time": {
                    "type": "string"
                },
                "group_id": {
                    "type": "integer",
                    "example": 1
                },
                "host_id": {
                    "type": "integer",
                    "example": 1
                },
                "location": {
                    "type": "string",
                    "example": "Room 101"
                },
                "meeting_link": {
                    "type": "string",
                    "example": "https://meet.google.com/abc-xyz"
                },
                "name": {
                    "description": "Required: true",
                    "type": "string",
                    "example": "DSA Session #1"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "schemas.CreateStipendRequest": {
            "type": "object",
            "required": [
                "amount",
                "currency",
                "month",
                "payment_method",
                "user_id"
            ],
            "properties": {
                "account_name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "account_number": {
                    "type": "string",
                    "example": "1234567890"
                },
                "amount": {
                    "type": "number",
                    "example": 500
                },
                "bank_name": {
                    "description": "Optional fields",
                    "type": "string",
                    "example": "Example Bank"
                },
                "currency": {
                    "type": "string",
                    "example": "USD"
                },
                "description": {
                    "type": "string",
                    "example": "Monthly stipend for April 2025"
                },
                "month": {
                    "type": "string"
                },
                "payment_method": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.PaymentMethod"
                        }
                    ],
                    "example": "bank_transfer"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "user_id": {
                    "description": "Required: true",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "schemas.CreateSubmissionRequest": {
            "type": "object",
            "required": [
                "code",
                "language",
                "problem_id",
                "user_id"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "def two_sum(nums, target):..."
                },
                "language": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.Language"
                        }
                    ],
                    "example": "python"
                },
                "problem_id": {
                    "type": "integer",
                    "example": 1
                },
                "user_id": {
                    "description": "Required: true",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "schemas.CreateSuperGroupRequest": {
            "type": "object",
            "required": [
                "country_id",
                "description",
                "name"
            ],
            "properties": {
                "country_id": {
                    "type": "integer",
                    "example": 1
                },
                "description": {
                    "type": "string",
                    "example": "Second generation of A2SV students"
                },
                "name": {
                    "description": "Required: true",
                    "type": "string",
                    "example": "A2SV Generation 2"
                }
            }
        },
        "schemas.CreateTrackRequest": {
            "type": "object",
            "required": [
                "description",
                "end_date",
                "group_id",
                "name",
                "start_date",
                "type"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Advanced Data Structures and Algorithms"
                },
                "end_date": {
                    "type": "string"
                },
                "group_id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "description": "Required: true",
                    "type": "string",
                    "example": "DSA Advanced Track"
                },
                "start_date": {
                    "type": "string"
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.TrackType"
                        }
                    ],
                    "example": "dsa"
                }
            }
        },
        "schemas.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "codeforces": {
                    "type": "string",
                    "example": "cf_user"
                },
                "country_id": {
                    "type": "integer",
                    "example": 1
                },
                "department": {
                    "type": "string",
                    "example": "Computer Science"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "expected_graduation_date": {
                    "type": "string"
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "github": {
                    "type": "string",
                    "example": "github_user"
                },
                "group_id": {
                    "type": "integer",
                    "example": 1
                },
                "hackerrank": {
                    "type": "string",
                    "example": "hr_user"
                },
                "instagram": {
                    "type": "string",
                    "example": "insta_user"
                },
                "leetcode": {
                    "type": "string",
                    "example": "leetcode_user"
                },
                "linkedin": {
                    "type": "string",
                    "example": "linkedin_profile"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "example": "MySecret123"
                },
                "phone": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "preferred_language": {
                    "type": "string",
                    "example": "en"
                },
                "role_id": {
                    "type": "integer",
                    "example": 2
                },
                "short_bio": {
                    "type": "string",
                    "example": "Software developer passionate about algorithms"
                },
                "student_id": {
                    "type": "string",
                    "example": "STU123"
                },
                "telegram_uid": {
                    "type": "string",
                    "example": "123456789"
                },
                "telegram_username": {
                    "type": "string",
                    "example": "@username"
                },
                "university": {
                    "type": "string",
                    "example": "Example University"
                }
            }
        },
        "schemas.CreateVoteRequest": {
            "type": "object",
            "required": [
                "entity_id",
                "entity_type",
                "user_id",
                "vote_type"
            ],
            "properties": {
                "entity_id": {
                    "type": "integer",
                    "example": 123
                },
                "entity_type": {
                    "description": "comment, post, track, submission, problem",
                    "type": "string",
                    "example": "comment"
                },
                "user_id": {
                    "description": "Required: true",
                    "type": "integer",
                    "example": 1
                },
                "vote_type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.VoteType"
                        }
                    ],
                    "example": "upvote"
                }
            }
        },
        "schemas.Difficulty": {
            "type": "string",
            "enum": [
                "easy",
                "medium",
                "hard",
                "very_hard"
            ],
            "x-enum-varnames": [
                "Easy",
                "Medium",
                "Hard",
                "VeryHard"
            ]
        },
        "schemas.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "details": {
                    "type": "string",
                    "example": "Email field is required"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                }
            }
        },
        "schemas.Language": {
            "type": "string",
            "enum": [
                "python",
                "java",
                "cpp",
                "javascript",
                "go"
            ],
            "x-enum-varnames": [
                "Python",
                "Java",
                "CPP",
                "JavaScript",
                "Go"
            ]
        },
        "schemas.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "mypassword123"
                }
            }
        },
        "schemas.PaginationMeta": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "page_size": {
                    "type": "integer",
                    "example": 10
                },
                "total": {
                    "type": "integer",
                    "example": 100
                },
                "total_pages": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "schemas.PaymentMethod": {
            "type": "string",
            "enum": [
                "bank_transfer",
                "mobile_money",
                "cash"
            ],
            "x-enum-varnames": [
                "BankTransfer",
                "MobileMoney",
                "Cash"
            ]
        },
        "schemas.PaymentStatus": {
            "type": "string",
            "enum": [
                "pending",
                "approved",
                "rejected",
                "paid",
                "failed"
            ],
            "x-enum-varnames": [
                "PaymentPending",
                "PaymentApproved",
                "PaymentRejected",
                "PaymentPaid",
                "PaymentFailed"
            ]
        },
        "schemas.SuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "meta": {
                    "$ref": "#/definitions/schemas.PaginationMeta"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                }
            }
        },
        "schemas.SuperToGroupRequest": {
            "type": "object",
            "required": [
                "group_ids"
            ],
            "properties": {
                "group_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        2,
                        3
                    ]
                }
            }
        },
        "schemas.TrackType": {
            "type": "string",
            "enum": [
                "dsa",
                "project",
                "system_design"
            ],
            "x-enum-varnames": [
                "DSATrack",
                "ProjectTrack",
                "SystemTrack"
            ]
        },
        "schemas.UpdateCountryRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "ET"
                },
                "name": {
                    "type": "string",
                    "example": "Ethiopia"
                }
            }
        },
        "schemas.UpdateExerciseRequest": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "problem_id": {
                    "type": "integer"
                },
                "track_id": {
                    "type": "integer"
                }
            }
        },
        "schemas.UpdateGroupRequest": {
            "type": "object",
            "properties": {
                "country_id": {
                    "type": "integer",
                    "example": 2
                },
                "description": {
                    "type": "string",
                    "example": "An advanced competitive programming team"
                },
                "hoa_id": {
                    "type": "integer",
                    "example": 6
                },
                "name": {
                    "type": "string",
                    "example": "Team Beta"
                },
                "short_name": {
                    "type": "string",
                    "example": "Beta"
                }
            }
        },
        "schemas.UpdateProblemRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "difficulty": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.Difficulty"
                        }
                    ],
                    "example": "hard"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "link": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "Two Sum Problem"
                },
                "platform": {
                    "type": "string",
                    "example": "leetcode"
                },
                "tag": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['array'",
                        "'hash-table'",
                        "'two-pointer']"
                    ]
                }
            }
        },
        "schemas.UpdateRecentActionRequest": {
            "type": "object",
            "properties": {
                "action_type": {
                    "type": "string",
                    "example": "problem_attempted"
                },
                "description": {
                    "type": "string",
                    "example": "Attempted Two Sum problem"
                },
                "entity_id": {
                    "type": "integer",
                    "example": 123
                },
                "entity_type": {
                    "type": "string",
                    "example": "problem"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "schemas.UpdateRoleRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Can moderate all content"
                },
                "type": {
                    "type": "string",
                    "example": "Senior Moderator"
                }
            }
        },
        "schemas.UpdateSessionRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Updated Introduction to Data Structures"
                },
                "end_time": {
                    "type": "string"
                },
                "group_id": {
                    "type": "integer",
                    "example": 1
                },
                "host_id": {
                    "type": "integer",
                    "example": 1
                },
                "location": {
                    "type": "string",
                    "example": "Room 102"
                },
                "meeting_link": {
                    "type": "string",
                    "example": "https://meet.google.com/new-link"
                },
                "name": {
                    "type": "string",
                    "example": "DSA Session #1 - Updated"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "completed"
                }
            }
        },
        "schemas.UpdateStipendRequest": {
            "type": "object",
            "properties": {
                "account_name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "account_number": {
                    "type": "string",
                    "example": "0987654321"
                },
                "amount": {
                    "type": "number",
                    "example": 550
                },
                "bank_name": {
                    "type": "string",
                    "example": "New Bank"
                },
                "currency": {
                    "type": "string",
                    "example": "USD"
                },
                "description": {
                    "type": "string",
                    "example": "Updated monthly stipend"
                },
                "notes": {
                    "type": "string",
                    "example": "Payment processed successfully"
                },
                "paid_at": {
                    "type": "string"
                },
                "payment_method": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.PaymentMethod"
                        }
                    ],
                    "example": "mobile_money"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.PaymentStatus"
                        }
                    ],
                    "example": "payment_approved"
                },
                "transaction_id": {
                    "description": "Payment processing fields",
                    "type": "string",
                    "example": "TXN123456"
                }
            }
        },
        "schemas.UpdateSuperGroupRequest": {
            "type": "object",
            "properties": {
                "country_id": {
                    "type": "integer",
                    "example": 1
                },
                "description": {
                    "type": "string",
                    "example": "Advanced track of second generation"
                },
                "name": {
                    "type": "string",
                    "example": "A2SV Generation 2 - Advanced"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                }
            }
        },
        "schemas.UpdateTrackRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Expert level algorithms"
                },
                "end_date": {
                    "type": "string"
                },
                "group_id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "DSA Expert Track"
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.TrackType"
                        }
                    ],
                    "example": "dsa"
                }
            }
        },
        "schemas.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "codeforces": {
                    "type": "string",
                    "example": "cf_user"
                },
                "country_id": {
                    "type": "integer",
                    "example": 1
                },
                "department": {
                    "type": "string",
                    "example": "Computer Science"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "expected_graduation_date": {
                    "type": "string"
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "github": {
                    "type": "string",
                    "example": "github_user"
                },
                "group_id": {
                    "type": "integer",
                    "example": 1
                },
                "hackerrank": {
                    "type": "string",
                    "example": "hr_user"
                },
                "instagram": {
                    "type": "string",
                    "example": "insta_user"
                },
                "leetcode": {
                    "type": "string",
                    "example": "leetcode_user"
                },
                "linkedin": {
                    "type": "string",
                    "example": "linkedin_profile"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "example": "MySecret123"
                },
                "phone": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "preferred_language": {
                    "type": "string",
                    "example": "en"
                },
                "role_id": {
                    "type": "integer",
                    "example": 2
                },
                "short_bio": {
                    "type": "string",
                    "example": "Software developer passionate about algorithms"
                },
                "student_id": {
                    "type": "string",
                    "example": "STU123"
                },
                "telegram_uid": {
                    "type": "string",
                    "example": "123456789"
                },
                "telegram_username": {
                    "type": "string",
                    "example": "@username"
                },
                "university": {
                    "type": "string",
                    "example": "Example University"
                }
            }
        },
        "schemas.UpdateVoteRequest": {
            "type": "object",
            "properties": {
                "vote_type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.VoteType"
                        }
                    ],
                    "example": "downvote"
                }
            }
        },
        "schemas.VoteType": {
            "type": "string",
            "enum": [
                "upvote",
                "downvote"
            ],
            "x-enum-varnames": [
                "Upvote",
                "Downvote"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "yene-hub-ls0y.onrender.com",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Hub API",
	Description:      "This is the API documentation for the Hub backend.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
