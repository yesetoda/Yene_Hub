package http

import (
	"os"
	"time"

	"a2sv.org/hub/Delivery/http/handlers"
	"a2sv.org/hub/Delivery/http/middleware"
	_ "a2sv.org/hub/docs" // ðŸ‘ˆ Important: docs generated by swag init
	"a2sv.org/hub/usecases"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// SetupRouter configures all the routes for the application
// @title A2SV Hub API
// @version 1.0
// @description API for managing A2SV Hub resources including users, groups, and learning activities
// @contact.name A2SV Support
// @contact.email support@a2sv.org
// @host yene-hub-ls0y.onrender.com
// @schemes https
// @BasePath /
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @securityDefinitions.oauth2.accessCode OAuth2
// @authorizationUrl https://accounts.google.com/o/oauth2/auth
// @tokenUrl https://oauth2.googleapis.com/token
func SetupRouter(
	userUseCase usecases.UserUseCase,
	roleUseCase usecases.RoleUseCase,
	groupUseCase usecases.GroupUseCase,
	countryUseCase usecases.CountryUseCase,
	bulkRegistrationUseCase usecases.BulkRegistrationUseCase,
	superGroupUseCase usecases.SuperGroupUseCaseInterface,
	recentActionUseCase usecases.RecentActionUsecase,
	voteUsecase usecases.VoteUsecase,
	trackUsecase usecases.TrackUsecase,
	superToGroupUseCase usecases.SuperToGroupUsecase,
	submissionUsecase usecases.SubmissionUsecase,
	stippendUsecase usecases.StipendUsecase,
	problemUsecase usecases.ProblemUsecase,
	sessionUsecase usecases.SessionUsecase,

) *gin.Engine {
	// Create a new gin router with default middleware
	// @securityDefinitions.apikey BearerAuth
	// @in header
	// @name Authorization
	// @description Type "Bearer" followed by a space and JWT token.
	router := gin.Default()

	// Configure CORS to allow all origins and necessary headers
	config := cors.Config{
		AllowOrigins:     []string{"*"},
		AllowMethods:     []string{"GET", "POST", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Length", "Content-Type", "Authorization"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}
	router.Use(cors.New(config))

	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	router.Use(middleware.UpstashRateLimiter(10, 60, os.Getenv("REDIS_URL"), os.Getenv("REDIS_TOKEN")))

	userHandler := handlers.NewUserHandler(userUseCase)
	roleHandler := handlers.NewRoleHandler(roleUseCase)
	groupHandler := handlers.NewGroupHandler(groupUseCase)
	countryHandler := handlers.NewCountryHandler(countryUseCase)
	registrationHandler := handlers.NewRegistrationHandler(bulkRegistrationUseCase)
	superGroupHandler := handlers.NewSuperGroupHandler(superGroupUseCase)
	voteHandler := handlers.NewVoteHandler(voteUsecase)
	trackHandler := handlers.NewTrackHandler(trackUsecase)
	superToGroupHandler := handlers.NewSuperToGroupHandler(superToGroupUseCase)
	submissionHandler := handlers.NewSubmissionHandeler(submissionUsecase)
	stippendHandler := handlers.NewStippendHandler(stippendUsecase)
	RoleMiddleware := middleware.NewRoleMiddleware(&userUseCase, &roleUseCase)
	problemHandler := handlers.NewProblemHandler(&problemUsecase)
	recentActionHandler := handlers.NewRecentActionHandler(recentActionUseCase)
	sessionHandler := handlers.NewSessionHandler(sessionUsecase)
	// API routes group
	api := router.Group("/api")
	{
		// OAuth
		authGroup := api.Group("/auth")
		{
			authGroup.POST("/login", userHandler.Login)

			authGroup.GET("/google", handlers.InitGoogleOAuth)

			authGroup.GET("/google/callback", handlers.HandleGoogleCallback)
		}
		// User routes
		users := api.Group("/users")
		{
			users.POST("", RoleMiddleware.RoleMiddleware("Head of Academy"), userHandler.CreateUser)
			users.PATCH("/:id", RoleMiddleware.RoleMiddleware("Head of Academy"), userHandler.UpdateUser)
			users.DELETE("/:id", RoleMiddleware.RoleMiddleware("Head of Academy"), userHandler.DeleteUser)

			users.GET("", userHandler.ListUsers)
			users.GET("/:id", userHandler.GetUserByID)
		}

		// Registration routes
		registration := api.Group("/registration")
		{
			registration.POST("/bulk", registrationHandler.RegisterBulkUsers)
			registration.POST("/bulk/role/:role_id", registrationHandler.RegisterUsersWithRole)
		}

		// Role routes
		roles := api.Group("/roles") //correct
		{
			roles.POST("", roleHandler.CreateRole)
			roles.GET("", roleHandler.ListRoles)
			roles.GET("/:id", roleHandler.GetRoleByID)
			roles.PATCH("/:id", roleHandler.UpdateRole)
			roles.DELETE("/:id", roleHandler.DeleteRole)
		}

		// Session routes
		sessions := api.Group("/sessions")
		{
			sessions.POST("", sessionHandler.CreateSession)
			sessions.GET("", sessionHandler.ListSessions)
			sessions.GET("/:id", sessionHandler.GetSessionByID)
			sessions.PATCH("/:id", sessionHandler.UpdateSession)
			sessions.DELETE("/:id", sessionHandler.DeleteSession)
		}
		// Recent Action routes
		recentActions := api.Group("/recent_actions")
		{
			recentActions.POST("", recentActionHandler.CreateRecentAction)
			recentActions.GET("", recentActionHandler.ListRecentActions)
			recentActions.GET("/:id", recentActionHandler.GetRecentActionByID)
			recentActions.PATCH("/:id", recentActionHandler.UpdateRecentAction)
			recentActions.DELETE("/:id", recentActionHandler.DeleteRecentAction)
		}
		// Group routes
		groups := api.Group("/groups")
		{
			groups.POST("", groupHandler.CreateGroup)
			groups.GET("", groupHandler.ListGroups)
			groups.GET("/:id", groupHandler.GetGroupByID)
			groups.GET("/country/:country_id", groupHandler.GetGroupsByCountryID)
			groups.PATCH("/:id", groupHandler.UpdateGroup)
			groups.DELETE("/:id", groupHandler.DeleteGroup)
		}
		problems := api.Group("/problems")
		{
			problems.POST("", problemHandler.CreateProblem)
			problems.GET("", problemHandler.ListProblems)
			problems.GET("/:id", problemHandler.GetProblemByID)
			problems.GET("/name/:name", problemHandler.GetProblemByName)
			problems.PATCH("/:id", problemHandler.UpdateProblem)
			problems.DELETE("/:id", problemHandler.DeleteProblem)
		}

		// Country routes
		countries := api.Group("/countries")
		{
			countries.POST("", countryHandler.CreateCountry)
			countries.GET("", countryHandler.ListCountries)
			countries.GET("/:id", countryHandler.GetCountryByID)
			countries.DELETE("/:id", countryHandler.DeleteCountry)
			// have some issue
			countries.PATCH("/:id", countryHandler.UpdateCountry)
		}

		// Super Group routes
		superGroups := api.Group("/super_groups")
		{
			superGroups.POST("", superGroupHandler.CreateSuperGroup)
			superGroups.GET("", superGroupHandler.ListSuperGroups)
			superGroups.GET("/:id", superGroupHandler.GetSuperGroup)
			superGroups.PATCH("/:id", superGroupHandler.UpdateSuperGroup)
			superGroups.DELETE("/:id", superGroupHandler.DeleteSuperGroup)
		}

		// Vote routes
		votes := api.Group("/votes") //there is error eof
		{
			votes.POST("", voteHandler.CreateVote)
			votes.GET("", voteHandler.ListVote)
			votes.GET("/:id", voteHandler.GetVoteByID)
			votes.GET("/comment/:comment_id", voteHandler.GetVoteByCommentID)
			votes.GET("/post/:post_id", voteHandler.GetVoteByPostID)
			votes.GET("/user/:user_id", voteHandler.GetVoteByUserID)
			votes.GET("/track/:track_id", voteHandler.GetVoteByTrackID)
			votes.GET("/submission/:submission_id", voteHandler.GetVoteBySubmissionID)
			votes.GET("/problem/:problem_id", voteHandler.GetVoteByProblemID)
			votes.PATCH("/:id", voteHandler.UpdateVote)
			votes.DELETE("/:id", voteHandler.DeleteVote)
		}

		// Track routes
		tracks := api.Group("/tracks")
		{
			tracks.POST("", trackHandler.CreateTrack)
			tracks.GET("", trackHandler.ListTrack)
			tracks.GET("/:id", trackHandler.GetTrackByID)
			tracks.GET("/name/:name", trackHandler.GetTrackByName)
			tracks.PATCH("/:id", trackHandler.UpdateTrack)
			tracks.DELETE("/:id", trackHandler.DeleteTrack)
		}

		// SuperToGroup routes
		superToGroups := api.Group("/super_to_groups")
		{
			superToGroups.POST("", superToGroupHandler.CreateSuperToGroup)
			superToGroups.GET("", superToGroupHandler.ListSuperToGroup)
			superToGroups.GET("/:id", superToGroupHandler.GetSuperToGroupByID)
			superToGroups.PATCH("/:id", superToGroupHandler.UpdateSuperToGroup)
			superToGroups.DELETE("/:id", superToGroupHandler.DeleteSuperToGroup)
		}

		// Submission routes
		submissions := api.Group("/submissions")
		{
			submissions.POST("", submissionHandler.CreateSubmission)
			submissions.GET("", submissionHandler.ListSubmission)
			submissions.GET("/:id", submissionHandler.GetSubmissionByID)
			submissions.GET("/problem/:problem_id", submissionHandler.GetSubmissionByProblemID)
			submissions.GET("/user/:user_id", submissionHandler.GetSubmissionByUserID)
		}

		// Stippend routes
		stipends := api.Group("/stipends")
		{
			stipends.POST("", stippendHandler.CreateStipend)
			stipends.GET("", stippendHandler.ListStippends)
			stipends.GET("/:id", stippendHandler.GetStippendByID)
			stipends.PATCH("/:id", stippendHandler.UpdateStipend)
			stipends.DELETE("/:id", stippendHandler.DeleteStipend)
		}
	}
	router.GET("/", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"status":  "ok",
			"message": "A2SV Hub API is running",
		})
	})

	return router
}
