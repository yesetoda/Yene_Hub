package http

import (
	"os"

	"a2sv.org/hub/Delivery/http/handlers"
	"a2sv.org/hub/Delivery/http/middleware"
	_ "a2sv.org/hub/docs" // ðŸ‘ˆ Important: docs generated by swag init
	"a2sv.org/hub/usecases"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// SetupRouter configures all the routes for the application
// @title A2SV Hub API
// @version 1.0
// @description API for managing A2SV Hub resources including users, groups, and learning activities
// @contact.name A2SV Support
// @contact.email support@a2sv.org
// @host localhost:8080
// @BasePath /
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @securityDefinitions.oauth2.accessCode OAuth2
// @authorizationUrl https://accounts.google.com/o/oauth2/auth
// @tokenUrl https://oauth2.googleapis.com/token
func SetupRouter(
	userUseCase usecases.UserUseCase,
	roleUseCase usecases.RoleUseCase,
	groupUseCase usecases.GroupUseCase,
	countryUseCase usecases.CountryUseCase,
	bulkRegistrationUseCase usecases.BulkRegistrationUseCase,
	superGroupUseCase usecases.SuperGroupUseCaseInterface,

) *gin.Engine {
	// Create a new gin router with default middleware
	router := gin.Default()
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	router.Use(middleware.UpstashRateLimiter(30, 60, os.Getenv("REDIS_URL"), os.Getenv("REDIS_TOKEN")))

	userHandler := handlers.NewUserHandler(userUseCase)
	roleHandler := handlers.NewRoleHandler(roleUseCase)
	groupHandler := handlers.NewGroupHandler(groupUseCase)
	countryHandler := handlers.NewCountryHandler(countryUseCase)
	registrationHandler := handlers.NewRegistrationHandler(bulkRegistrationUseCase)
	superGroupHandler := handlers.NewSuperGroupHandler(superGroupUseCase)

	RoleMiddleware := middleware.NewRoleMiddleware(&userUseCase,&roleUseCase)

	// API routes group
	api := router.Group("/api")
	{
		// OAuth
		authGroup := api.Group("/auth")
		{
			authGroup.POST("/login", userHandler.Login)
			
			authGroup.GET("/google", handlers.InitGoogleOAuth)
			
			authGroup.GET("/google/callback", handlers.HandleGoogleCallback)
		}
		// User routes
		users := api.Group("/users")
		{
			users.POST("",RoleMiddleware.RoleMiddleware("Head of Academy"), userHandler.CreateUser)
			users.PUT("/:id",RoleMiddleware.RoleMiddleware("Head of Academy"), userHandler.UpdateUser)
			users.DELETE("/:id",RoleMiddleware.RoleMiddleware("Head of Academy"), userHandler.DeleteUser)

			users.GET("", userHandler.ListUsers)
			users.GET("/:id", userHandler.GetUserByID)
		}

		// Registration routes
		registration := api.Group("/registration")
		{
			registration.POST("/bulk", registrationHandler.RegisterBulkUsers)
			registration.POST("/bulk/role/:role_id", registrationHandler.RegisterUsersWithRole)
		}

		// Role routes
		roles := api.Group("/roles")
		{
			roles.POST("", roleHandler.CreateRole)
			roles.GET("", roleHandler.ListRoles)
			roles.GET("/:id", roleHandler.GetRoleByID)
			roles.PUT("/:id", roleHandler.UpdateRole)
			roles.DELETE("/:id", roleHandler.DeleteRole)
		}

		// Group routes
		groups := api.Group("/groups")
		{
			groups.POST("", groupHandler.CreateGroup)
			groups.GET("", groupHandler.ListGroups)
			groups.GET("/:id", groupHandler.GetGroupByID)
			groups.GET("/country/:country_id", groupHandler.GetGroupsByCountryID)
			groups.PUT("/:id", groupHandler.UpdateGroup)
			groups.DELETE("/:id", groupHandler.DeleteGroup)
		}

		// Country routes
		countries := api.Group("/countries")
		{
			countries.POST("", countryHandler.CreateCountry)
			countries.GET("", countryHandler.ListCountries)
			countries.GET("/:id", countryHandler.GetCountryByID)
			countries.PUT("/:id", countryHandler.UpdateCountry)
			countries.DELETE("/:id", countryHandler.DeleteCountry)
		}

		// Super Group routes
		superGroups := api.Group("/super-groups")
		{
			superGroups.POST("/create", superGroupHandler.CreateSuperGroup)
			superGroups.GET("", superGroupHandler.ListSuperGroups)
			superGroups.GET("/:id", superGroupHandler.GetSuperGroup)
			superGroups.PUT("/:id", superGroupHandler.UpdateSuperGroup)
			superGroups.DELETE("/:id", superGroupHandler.DeleteSuperGroup)

			// Group management within super groups
		}
	}
	router.GET("/", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"status":  "ok",
			"message": "A2SV Hub API is running",
		})
	})

	return router
}
